
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005af0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005c80  08005c80  00015c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d00  08005d00  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08005d00  08005d00  00015d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d08  08005d08  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d08  08005d08  00015d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d0c  08005d0c  00015d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08005d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00012f10  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012f28  20012f28  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013cdd  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c62  00000000  00000000  00033d25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001158  00000000  00000000  00036988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001050  00000000  00000000  00037ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022961  00000000  00000000  00038b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013c5c  00000000  00000000  0005b491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d47b7  00000000  00000000  0006f0ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001438a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048a4  00000000  00000000  001438f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c68 	.word	0x08005c68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	08005c68 	.word	0x08005c68

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b090      	sub	sp, #64	; 0x40
 80004d8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	TaskHandle_t task1Handle = NULL;
 80004da:	2300      	movs	r3, #0
 80004dc:	623b      	str	r3, [r7, #32]
	TaskHandle_t task2Handle = NULL;
 80004de:	2300      	movs	r3, #0
 80004e0:	61fb      	str	r3, [r7, #28]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f000 fca9 	bl	8000e38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f879 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 f933 	bl	8000754 <MX_GPIO_Init>
  MX_DMA_Init();
 80004ee:	f000 f909 	bl	8000704 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004f2:	f000 f8dd 	bl	80006b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	status = xTaskCreate(task1Handler, "Task-1", 200, "Hello World From Task 1", 2, &task1Handle);
 80004f6:	f107 0320 	add.w	r3, r7, #32
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	2302      	movs	r3, #2
 80004fe:	9300      	str	r3, [sp, #0]
 8000500:	4b2e      	ldr	r3, [pc, #184]	; (80005bc <main+0xe8>)
 8000502:	22c8      	movs	r2, #200	; 0xc8
 8000504:	492e      	ldr	r1, [pc, #184]	; (80005c0 <main+0xec>)
 8000506:	482f      	ldr	r0, [pc, #188]	; (80005c4 <main+0xf0>)
 8000508:	f003 fd82 	bl	8004010 <xTaskCreate>
 800050c:	6338      	str	r0, [r7, #48]	; 0x30

	configASSERT(status == pdPASS);
 800050e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000510:	2b01      	cmp	r3, #1
 8000512:	d00a      	beq.n	800052a <main+0x56>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000518:	f383 8811 	msr	BASEPRI, r3
 800051c:	f3bf 8f6f 	isb	sy
 8000520:	f3bf 8f4f 	dsb	sy
 8000524:	62bb      	str	r3, [r7, #40]	; 0x28
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000526:	bf00      	nop
 8000528:	e7fe      	b.n	8000528 <main+0x54>

	status = xTaskCreate(task2Handler, "Task-2", 200, "Hello World From Task 2", 2, &task2Handle);
 800052a:	f107 031c 	add.w	r3, r7, #28
 800052e:	9301      	str	r3, [sp, #4]
 8000530:	2302      	movs	r3, #2
 8000532:	9300      	str	r3, [sp, #0]
 8000534:	4b24      	ldr	r3, [pc, #144]	; (80005c8 <main+0xf4>)
 8000536:	22c8      	movs	r2, #200	; 0xc8
 8000538:	4924      	ldr	r1, [pc, #144]	; (80005cc <main+0xf8>)
 800053a:	4825      	ldr	r0, [pc, #148]	; (80005d0 <main+0xfc>)
 800053c:	f003 fd68 	bl	8004010 <xTaskCreate>
 8000540:	6338      	str	r0, [r7, #48]	; 0x30

	configASSERT(status == pdPASS);
 8000542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000544:	2b01      	cmp	r3, #1
 8000546:	d00a      	beq.n	800055e <main+0x8a>
        __asm volatile
 8000548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800054c:	f383 8811 	msr	BASEPRI, r3
 8000550:	f3bf 8f6f 	isb	sy
 8000554:	f3bf 8f4f 	dsb	sy
 8000558:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800055a:	bf00      	nop
 800055c:	e7fe      	b.n	800055c <main+0x88>

  //start FreeRTOS scheduler
  vTaskStartScheduler();
 800055e:	f003 fef5 	bl	800434c <vTaskStartScheduler>

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000562:	f107 0308 	add.w	r3, r7, #8
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
 8000570:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000572:	2301      	movs	r3, #1
 8000574:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000576:	2300      	movs	r3, #0
 8000578:	613b      	str	r3, [r7, #16]

  uint16_t leds[] = {GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14, GPIO_PIN_15};
 800057a:	4a16      	ldr	r2, [pc, #88]	; (80005d4 <main+0x100>)
 800057c:	463b      	mov	r3, r7
 800057e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000582:	e883 0003 	stmia.w	r3, {r0, r1}
  int num_leds = sizeof(leds) / sizeof(leds[0]);
 8000586:	2304      	movs	r3, #4
 8000588:	62fb      	str	r3, [r7, #44]	; 0x2c

  for (int i = 0; i < num_leds; i++) {
 800058a:	2300      	movs	r3, #0
 800058c:	637b      	str	r3, [r7, #52]	; 0x34
 800058e:	e00f      	b.n	80005b0 <main+0xdc>
	  GPIO_InitStruct.Pin = leds[i];
 8000590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000592:	005b      	lsls	r3, r3, #1
 8000594:	3338      	adds	r3, #56	; 0x38
 8000596:	443b      	add	r3, r7
 8000598:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 800059c:	60bb      	str	r3, [r7, #8]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800059e:	f107 0308 	add.w	r3, r7, #8
 80005a2:	4619      	mov	r1, r3
 80005a4:	480c      	ldr	r0, [pc, #48]	; (80005d8 <main+0x104>)
 80005a6:	f001 f8e7 	bl	8001778 <HAL_GPIO_Init>
  for (int i = 0; i < num_leds; i++) {
 80005aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005ac:	3301      	adds	r3, #1
 80005ae:	637b      	str	r3, [r7, #52]	; 0x34
 80005b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80005b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005b4:	429a      	cmp	r2, r3
 80005b6:	dbeb      	blt.n	8000590 <main+0xbc>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <main+0xe4>
 80005ba:	bf00      	nop
 80005bc:	08005c80 	.word	0x08005c80
 80005c0:	08005c98 	.word	0x08005c98
 80005c4:	08000a11 	.word	0x08000a11
 80005c8:	08005ca0 	.word	0x08005ca0
 80005cc:	08005cb8 	.word	0x08005cb8
 80005d0:	08000a3d 	.word	0x08000a3d
 80005d4:	08005cc0 	.word	0x08005cc0
 80005d8:	40020c00 	.word	0x40020c00

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	; 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	2230      	movs	r2, #48	; 0x30
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f005 fb34 	bl	8005c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	2300      	movs	r3, #0
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	4b28      	ldr	r3, [pc, #160]	; (80006a8 <SystemClock_Config+0xcc>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	4a27      	ldr	r2, [pc, #156]	; (80006a8 <SystemClock_Config+0xcc>)
 800060a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060e:	6413      	str	r3, [r2, #64]	; 0x40
 8000610:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <SystemClock_Config+0xcc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	4b22      	ldr	r3, [pc, #136]	; (80006ac <SystemClock_Config+0xd0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a21      	ldr	r2, [pc, #132]	; (80006ac <SystemClock_Config+0xd0>)
 8000626:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <SystemClock_Config+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000638:	2302      	movs	r3, #2
 800063a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000640:	2310      	movs	r3, #16
 8000642:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000644:	2302      	movs	r3, #2
 8000646:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000648:	2300      	movs	r3, #0
 800064a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800064c:	2308      	movs	r3, #8
 800064e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000650:	2332      	movs	r3, #50	; 0x32
 8000652:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000654:	2304      	movs	r3, #4
 8000656:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000658:	2307      	movs	r3, #7
 800065a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 0320 	add.w	r3, r7, #32
 8000660:	4618      	mov	r0, r3
 8000662:	f001 fa59 	bl	8001b18 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800066c:	f000 fa0c 	bl	8000a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000674:	2302      	movs	r3, #2
 8000676:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800067c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000680:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000686:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fcba 	bl	8002008 <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800069a:	f000 f9f5 	bl	8000a88 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3750      	adds	r7, #80	; 0x50
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006b6:	4a12      	ldr	r2, [pc, #72]	; (8000700 <MX_USART2_UART_Init+0x50>)
 80006b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006e8:	f002 f98e 	bl	8002a08 <HAL_UART_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006f2:	f000 f9c9 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000034 	.word	0x20000034
 8000700:	40004400 	.word	0x40004400

08000704 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <MX_DMA_Init+0x4c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a0f      	ldr	r2, [pc, #60]	; (8000750 <MX_DMA_Init+0x4c>)
 8000714:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <MX_DMA_Init+0x4c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	2100      	movs	r1, #0
 800072a:	2010      	movs	r0, #16
 800072c:	f000 fc7e 	bl	800102c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000730:	2010      	movs	r0, #16
 8000732:	f000 fc97 	bl	8001064 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	2100      	movs	r1, #0
 800073a:	2011      	movs	r0, #17
 800073c:	f000 fc76 	bl	800102c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000740:	2011      	movs	r0, #17
 8000742:	f000 fc8f 	bl	8001064 <HAL_NVIC_EnableIRQ>

}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08c      	sub	sp, #48	; 0x30
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
 800076e:	4ba2      	ldr	r3, [pc, #648]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4aa1      	ldr	r2, [pc, #644]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 8000774:	f043 0310 	orr.w	r3, r3, #16
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b9f      	ldr	r3, [pc, #636]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0310 	and.w	r3, r3, #16
 8000782:	61bb      	str	r3, [r7, #24]
 8000784:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	4b9b      	ldr	r3, [pc, #620]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a9a      	ldr	r2, [pc, #616]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b98      	ldr	r3, [pc, #608]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	4b94      	ldr	r3, [pc, #592]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a93      	ldr	r2, [pc, #588]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b91      	ldr	r3, [pc, #580]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	4b8d      	ldr	r3, [pc, #564]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a8c      	ldr	r2, [pc, #560]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b8a      	ldr	r3, [pc, #552]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	4b86      	ldr	r3, [pc, #536]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a85      	ldr	r2, [pc, #532]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b83      	ldr	r3, [pc, #524]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b7f      	ldr	r3, [pc, #508]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a7e      	ldr	r2, [pc, #504]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b7c      	ldr	r3, [pc, #496]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0308 	and.w	r3, r3, #8
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2108      	movs	r1, #8
 8000816:	4879      	ldr	r0, [pc, #484]	; (80009fc <MX_GPIO_Init+0x2a8>)
 8000818:	f001 f94a 	bl	8001ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800081c:	2201      	movs	r2, #1
 800081e:	2101      	movs	r1, #1
 8000820:	4877      	ldr	r0, [pc, #476]	; (8000a00 <MX_GPIO_Init+0x2ac>)
 8000822:	f001 f945 	bl	8001ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000826:	2200      	movs	r2, #0
 8000828:	f24f 0110 	movw	r1, #61456	; 0xf010
 800082c:	4875      	ldr	r0, [pc, #468]	; (8000a04 <MX_GPIO_Init+0x2b0>)
 800082e:	f001 f93f 	bl	8001ab0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000832:	2308      	movs	r3, #8
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	2301      	movs	r3, #1
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	486c      	ldr	r0, [pc, #432]	; (80009fc <MX_GPIO_Init+0x2a8>)
 800084a:	f000 ff95 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800084e:	2301      	movs	r3, #1
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	4866      	ldr	r0, [pc, #408]	; (8000a00 <MX_GPIO_Init+0x2ac>)
 8000866:	f000 ff87 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800086a:	2308      	movs	r3, #8
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800087a:	2305      	movs	r3, #5
 800087c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	485e      	ldr	r0, [pc, #376]	; (8000a00 <MX_GPIO_Init+0x2ac>)
 8000886:	f000 ff77 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800088a:	2301      	movs	r3, #1
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	485a      	ldr	r0, [pc, #360]	; (8000a08 <MX_GPIO_Init+0x2b4>)
 80008a0:	f000 ff6a 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008a4:	2310      	movs	r3, #16
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008b4:	2306      	movs	r3, #6
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	4852      	ldr	r0, [pc, #328]	; (8000a08 <MX_GPIO_Init+0x2b4>)
 80008c0:	f000 ff5a 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008c4:	23e0      	movs	r3, #224	; 0xe0
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c8:	2302      	movs	r3, #2
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008d4:	2305      	movs	r3, #5
 80008d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	484a      	ldr	r0, [pc, #296]	; (8000a08 <MX_GPIO_Init+0x2b4>)
 80008e0:	f000 ff4a 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008e4:	2304      	movs	r3, #4
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	4845      	ldr	r0, [pc, #276]	; (8000a0c <MX_GPIO_Init+0x2b8>)
 80008f8:	f000 ff3e 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800090e:	2305      	movs	r3, #5
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	483c      	ldr	r0, [pc, #240]	; (8000a0c <MX_GPIO_Init+0x2b8>)
 800091a:	f000 ff2d 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800091e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000922:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4833      	ldr	r0, [pc, #204]	; (8000a04 <MX_GPIO_Init+0x2b0>)
 8000938:	f000 ff1e 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800093c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800094e:	2306      	movs	r3, #6
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4829      	ldr	r0, [pc, #164]	; (8000a00 <MX_GPIO_Init+0x2ac>)
 800095a:	f000 ff0d 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800095e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4825      	ldr	r0, [pc, #148]	; (8000a08 <MX_GPIO_Init+0x2b4>)
 8000974:	f000 ff00 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000978:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800098a:	230a      	movs	r3, #10
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	481c      	ldr	r0, [pc, #112]	; (8000a08 <MX_GPIO_Init+0x2b4>)
 8000996:	f000 feef 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800099a:	2320      	movs	r3, #32
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099e:	2300      	movs	r3, #0
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4815      	ldr	r0, [pc, #84]	; (8000a04 <MX_GPIO_Init+0x2b0>)
 80009ae:	f000 fee3 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009b2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009b8:	2312      	movs	r3, #18
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009c4:	2304      	movs	r3, #4
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	480f      	ldr	r0, [pc, #60]	; (8000a0c <MX_GPIO_Init+0x2b8>)
 80009d0:	f000 fed2 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009d4:	2302      	movs	r3, #2
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009d8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <MX_GPIO_Init+0x2a8>)
 80009ea:	f000 fec5 	bl	8001778 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ee:	bf00      	nop
 80009f0:	3730      	adds	r7, #48	; 0x30
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40021000 	.word	0x40021000
 8000a00:	40020800 	.word	0x40020800
 8000a04:	40020c00 	.word	0x40020c00
 8000a08:	40020000 	.word	0x40020000
 8000a0c:	40020400 	.word	0x40020400

08000a10 <task1Handler>:

/* USER CODE BEGIN 4 */
uint16_t g_customDelay = 1;
static void task1Handler(void *parameters)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	uint8_t receiveBuffer[6];
	while(1) {
//		printf("%s\n", (char *)parameters);
		HAL_UART_Receive_IT(&huart2, receiveBuffer, 6);
 8000a18:	f107 0308 	add.w	r3, r7, #8
 8000a1c:	2206      	movs	r2, #6
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <task1Handler+0x24>)
 8000a22:	f002 f83e 	bl	8002aa2 <HAL_UART_Receive_IT>
		g_customDelay = receiveBuffer;
 8000a26:	f107 0308 	add.w	r3, r7, #8
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	4b02      	ldr	r3, [pc, #8]	; (8000a38 <task1Handler+0x28>)
 8000a2e:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, receiveBuffer, 6);
 8000a30:	e7f2      	b.n	8000a18 <task1Handler+0x8>
 8000a32:	bf00      	nop
 8000a34:	20000034 	.word	0x20000034
 8000a38:	20000000 	.word	0x20000000

08000a3c <task2Handler>:

	}
}

static void task2Handler(void *parameters)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	while(1) {
//			printf("%s\n", (char *)parameters);
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000a44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a48:	4804      	ldr	r0, [pc, #16]	; (8000a5c <task2Handler+0x20>)
 8000a4a:	f001 f84a 	bl	8001ae2 <HAL_GPIO_TogglePin>
			vTaskDelay(g_customDelay / portTICK_PERIOD_MS);
 8000a4e:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <task2Handler+0x24>)
 8000a50:	881b      	ldrh	r3, [r3, #0]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f003 fc46 	bl	80042e4 <vTaskDelay>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000a58:	e7f4      	b.n	8000a44 <task2Handler+0x8>
 8000a5a:	bf00      	nop
 8000a5c:	40020c00 	.word	0x40020c00
 8000a60:	20000000 	.word	0x20000000

08000a64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d101      	bne.n	8000a7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a76:	f000 fa01 	bl	8000e7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40001000 	.word	0x40001000

08000a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8c:	b672      	cpsid	i
}
 8000a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <Error_Handler+0x8>
	...

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	4a0f      	ldr	r2, [pc, #60]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	4a08      	ldr	r2, [pc, #32]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	40023800 	.word	0x40023800

08000ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a4b      	ldr	r2, [pc, #300]	; (8000c30 <HAL_UART_MspInit+0x14c>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	f040 8090 	bne.w	8000c28 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b08:	2300      	movs	r3, #0
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	4b49      	ldr	r3, [pc, #292]	; (8000c34 <HAL_UART_MspInit+0x150>)
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b10:	4a48      	ldr	r2, [pc, #288]	; (8000c34 <HAL_UART_MspInit+0x150>)
 8000b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b16:	6413      	str	r3, [r2, #64]	; 0x40
 8000b18:	4b46      	ldr	r3, [pc, #280]	; (8000c34 <HAL_UART_MspInit+0x150>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	4b42      	ldr	r3, [pc, #264]	; (8000c34 <HAL_UART_MspInit+0x150>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	4a41      	ldr	r2, [pc, #260]	; (8000c34 <HAL_UART_MspInit+0x150>)
 8000b2e:	f043 0301 	orr.w	r3, r3, #1
 8000b32:	6313      	str	r3, [r2, #48]	; 0x30
 8000b34:	4b3f      	ldr	r3, [pc, #252]	; (8000c34 <HAL_UART_MspInit+0x150>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b40:	230c      	movs	r3, #12
 8000b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b50:	2307      	movs	r3, #7
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4837      	ldr	r0, [pc, #220]	; (8000c38 <HAL_UART_MspInit+0x154>)
 8000b5c:	f000 fe0c 	bl	8001778 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000b60:	4b36      	ldr	r3, [pc, #216]	; (8000c3c <HAL_UART_MspInit+0x158>)
 8000b62:	4a37      	ldr	r2, [pc, #220]	; (8000c40 <HAL_UART_MspInit+0x15c>)
 8000b64:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000b66:	4b35      	ldr	r3, [pc, #212]	; (8000c3c <HAL_UART_MspInit+0x158>)
 8000b68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b6c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b6e:	4b33      	ldr	r3, [pc, #204]	; (8000c3c <HAL_UART_MspInit+0x158>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b74:	4b31      	ldr	r3, [pc, #196]	; (8000c3c <HAL_UART_MspInit+0x158>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b7a:	4b30      	ldr	r3, [pc, #192]	; (8000c3c <HAL_UART_MspInit+0x158>)
 8000b7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b80:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b82:	4b2e      	ldr	r3, [pc, #184]	; (8000c3c <HAL_UART_MspInit+0x158>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b88:	4b2c      	ldr	r3, [pc, #176]	; (8000c3c <HAL_UART_MspInit+0x158>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000b8e:	4b2b      	ldr	r3, [pc, #172]	; (8000c3c <HAL_UART_MspInit+0x158>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b94:	4b29      	ldr	r3, [pc, #164]	; (8000c3c <HAL_UART_MspInit+0x158>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b9a:	4b28      	ldr	r3, [pc, #160]	; (8000c3c <HAL_UART_MspInit+0x158>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ba0:	4826      	ldr	r0, [pc, #152]	; (8000c3c <HAL_UART_MspInit+0x158>)
 8000ba2:	f000 fa6d 	bl	8001080 <HAL_DMA_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000bac:	f7ff ff6c 	bl	8000a88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a22      	ldr	r2, [pc, #136]	; (8000c3c <HAL_UART_MspInit+0x158>)
 8000bb4:	639a      	str	r2, [r3, #56]	; 0x38
 8000bb6:	4a21      	ldr	r2, [pc, #132]	; (8000c3c <HAL_UART_MspInit+0x158>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000bbc:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <HAL_UART_MspInit+0x160>)
 8000bbe:	4a22      	ldr	r2, [pc, #136]	; (8000c48 <HAL_UART_MspInit+0x164>)
 8000bc0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000bc2:	4b20      	ldr	r3, [pc, #128]	; (8000c44 <HAL_UART_MspInit+0x160>)
 8000bc4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bc8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bca:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <HAL_UART_MspInit+0x160>)
 8000bcc:	2240      	movs	r2, #64	; 0x40
 8000bce:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <HAL_UART_MspInit+0x160>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bd6:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <HAL_UART_MspInit+0x160>)
 8000bd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bdc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bde:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <HAL_UART_MspInit+0x160>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000be4:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <HAL_UART_MspInit+0x160>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <HAL_UART_MspInit+0x160>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <HAL_UART_MspInit+0x160>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bf6:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <HAL_UART_MspInit+0x160>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000bfc:	4811      	ldr	r0, [pc, #68]	; (8000c44 <HAL_UART_MspInit+0x160>)
 8000bfe:	f000 fa3f 	bl	8001080 <HAL_DMA_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8000c08:	f7ff ff3e 	bl	8000a88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a0d      	ldr	r2, [pc, #52]	; (8000c44 <HAL_UART_MspInit+0x160>)
 8000c10:	635a      	str	r2, [r3, #52]	; 0x34
 8000c12:	4a0c      	ldr	r2, [pc, #48]	; (8000c44 <HAL_UART_MspInit+0x160>)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	2026      	movs	r0, #38	; 0x26
 8000c1e:	f000 fa05 	bl	800102c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c22:	2026      	movs	r0, #38	; 0x26
 8000c24:	f000 fa1e 	bl	8001064 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c28:	bf00      	nop
 8000c2a:	3728      	adds	r7, #40	; 0x28
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40004400 	.word	0x40004400
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020000 	.word	0x40020000
 8000c3c:	20000078 	.word	0x20000078
 8000c40:	40026088 	.word	0x40026088
 8000c44:	200000d8 	.word	0x200000d8
 8000c48:	400260a0 	.word	0x400260a0

08000c4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08e      	sub	sp, #56	; 0x38
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	4b33      	ldr	r3, [pc, #204]	; (8000d30 <HAL_InitTick+0xe4>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c64:	4a32      	ldr	r2, [pc, #200]	; (8000d30 <HAL_InitTick+0xe4>)
 8000c66:	f043 0310 	orr.w	r3, r3, #16
 8000c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6c:	4b30      	ldr	r3, [pc, #192]	; (8000d30 <HAL_InitTick+0xe4>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	f003 0310 	and.w	r3, r3, #16
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c78:	f107 0210 	add.w	r2, r7, #16
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4611      	mov	r1, r2
 8000c82:	4618      	mov	r0, r3
 8000c84:	f001 fbe0 	bl	8002448 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c88:	6a3b      	ldr	r3, [r7, #32]
 8000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d103      	bne.n	8000c9a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c92:	f001 fbb1 	bl	80023f8 <HAL_RCC_GetPCLK1Freq>
 8000c96:	6378      	str	r0, [r7, #52]	; 0x34
 8000c98:	e004      	b.n	8000ca4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c9a:	f001 fbad 	bl	80023f8 <HAL_RCC_GetPCLK1Freq>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ca6:	4a23      	ldr	r2, [pc, #140]	; (8000d34 <HAL_InitTick+0xe8>)
 8000ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cac:	0c9b      	lsrs	r3, r3, #18
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cb2:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <HAL_InitTick+0xec>)
 8000cb4:	4a21      	ldr	r2, [pc, #132]	; (8000d3c <HAL_InitTick+0xf0>)
 8000cb6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <HAL_InitTick+0xec>)
 8000cba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cbe:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cc0:	4a1d      	ldr	r2, [pc, #116]	; (8000d38 <HAL_InitTick+0xec>)
 8000cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <HAL_InitTick+0xec>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <HAL_InitTick+0xec>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <HAL_InitTick+0xec>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000cd8:	4817      	ldr	r0, [pc, #92]	; (8000d38 <HAL_InitTick+0xec>)
 8000cda:	f001 fbe7 	bl	80024ac <HAL_TIM_Base_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ce4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d11b      	bne.n	8000d24 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000cec:	4812      	ldr	r0, [pc, #72]	; (8000d38 <HAL_InitTick+0xec>)
 8000cee:	f001 fc37 	bl	8002560 <HAL_TIM_Base_Start_IT>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000cf8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d111      	bne.n	8000d24 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d00:	2036      	movs	r0, #54	; 0x36
 8000d02:	f000 f9af 	bl	8001064 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2b0f      	cmp	r3, #15
 8000d0a:	d808      	bhi.n	8000d1e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	6879      	ldr	r1, [r7, #4]
 8000d10:	2036      	movs	r0, #54	; 0x36
 8000d12:	f000 f98b 	bl	800102c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d16:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <HAL_InitTick+0xf4>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6013      	str	r3, [r2, #0]
 8000d1c:	e002      	b.n	8000d24 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3738      	adds	r7, #56	; 0x38
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40023800 	.word	0x40023800
 8000d34:	431bde83 	.word	0x431bde83
 8000d38:	20000138 	.word	0x20000138
 8000d3c:	40001000 	.word	0x40001000
 8000d40:	20000008 	.word	0x20000008

08000d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <NMI_Handler+0x4>

08000d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <HardFault_Handler+0x4>

08000d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <MemManage_Handler+0x4>

08000d56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <BusFault_Handler+0x4>

08000d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <UsageFault_Handler+0x4>

08000d62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <DMA1_Stream5_IRQHandler+0x10>)
 8000d76:	f000 fac3 	bl	8001300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000078 	.word	0x20000078

08000d84 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <DMA1_Stream6_IRQHandler+0x10>)
 8000d8a:	f000 fab9 	bl	8001300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200000d8 	.word	0x200000d8

08000d98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <USART2_IRQHandler+0x10>)
 8000d9e:	f001 feb1 	bl	8002b04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000034 	.word	0x20000034

08000dac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <TIM6_DAC_IRQHandler+0x10>)
 8000db2:	f001 fc45 	bl	8002640 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000138 	.word	0x20000138

08000dc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <SystemInit+0x20>)
 8000dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dca:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <SystemInit+0x20>)
 8000dcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000de4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de8:	480d      	ldr	r0, [pc, #52]	; (8000e20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dea:	490e      	ldr	r1, [pc, #56]	; (8000e24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dec:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df0:	e002      	b.n	8000df8 <LoopCopyDataInit>

08000df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df6:	3304      	adds	r3, #4

08000df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dfc:	d3f9      	bcc.n	8000df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfe:	4a0b      	ldr	r2, [pc, #44]	; (8000e2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e00:	4c0b      	ldr	r4, [pc, #44]	; (8000e30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e04:	e001      	b.n	8000e0a <LoopFillZerobss>

08000e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e08:	3204      	adds	r2, #4

08000e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e0c:	d3fb      	bcc.n	8000e06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e0e:	f7ff ffd7 	bl	8000dc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e12:	f004 feef 	bl	8005bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e16:	f7ff fb5d 	bl	80004d4 <main>
  bx  lr    
 8000e1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e24:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000e28:	08005d10 	.word	0x08005d10
  ldr r2, =_sbss
 8000e2c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000e30:	20012f28 	.word	0x20012f28

08000e34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e34:	e7fe      	b.n	8000e34 <ADC_IRQHandler>
	...

08000e38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e3c:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0d      	ldr	r2, [pc, #52]	; (8000e78 <HAL_Init+0x40>)
 8000e42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e48:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <HAL_Init+0x40>)
 8000e4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <HAL_Init+0x40>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a07      	ldr	r2, [pc, #28]	; (8000e78 <HAL_Init+0x40>)
 8000e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e60:	2003      	movs	r0, #3
 8000e62:	f000 f8d8 	bl	8001016 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e66:	2000      	movs	r0, #0
 8000e68:	f7ff fef0 	bl	8000c4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e6c:	f7ff fe12 	bl	8000a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40023c00 	.word	0x40023c00

08000e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_IncTick+0x20>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x24>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <HAL_IncTick+0x24>)
 8000e8e:	6013      	str	r3, [r2, #0]
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	2000000c 	.word	0x2000000c
 8000ea0:	20000180 	.word	0x20000180

08000ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <HAL_GetTick+0x14>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000180 	.word	0x20000180

08000ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eee:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	60d3      	str	r3, [r2, #12]
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <__NVIC_GetPriorityGrouping+0x18>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	0a1b      	lsrs	r3, r3, #8
 8000f0e:	f003 0307 	and.w	r3, r3, #7
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	db0b      	blt.n	8000f4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	f003 021f 	and.w	r2, r3, #31
 8000f38:	4907      	ldr	r1, [pc, #28]	; (8000f58 <__NVIC_EnableIRQ+0x38>)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	095b      	lsrs	r3, r3, #5
 8000f40:	2001      	movs	r0, #1
 8000f42:	fa00 f202 	lsl.w	r2, r0, r2
 8000f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000e100 	.word	0xe000e100

08000f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	6039      	str	r1, [r7, #0]
 8000f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	db0a      	blt.n	8000f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	490c      	ldr	r1, [pc, #48]	; (8000fa8 <__NVIC_SetPriority+0x4c>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	0112      	lsls	r2, r2, #4
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	440b      	add	r3, r1
 8000f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f84:	e00a      	b.n	8000f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4908      	ldr	r1, [pc, #32]	; (8000fac <__NVIC_SetPriority+0x50>)
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	f003 030f 	and.w	r3, r3, #15
 8000f92:	3b04      	subs	r3, #4
 8000f94:	0112      	lsls	r2, r2, #4
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	440b      	add	r3, r1
 8000f9a:	761a      	strb	r2, [r3, #24]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000e100 	.word	0xe000e100
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	; 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f1c3 0307 	rsb	r3, r3, #7
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	bf28      	it	cs
 8000fce:	2304      	movcs	r3, #4
 8000fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	2b06      	cmp	r3, #6
 8000fd8:	d902      	bls.n	8000fe0 <NVIC_EncodePriority+0x30>
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3b03      	subs	r3, #3
 8000fde:	e000      	b.n	8000fe2 <NVIC_EncodePriority+0x32>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8001002:	43d9      	mvns	r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	4313      	orrs	r3, r2
         );
}
 800100a:	4618      	mov	r0, r3
 800100c:	3724      	adds	r7, #36	; 0x24
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ff4c 	bl	8000ebc <__NVIC_SetPriorityGrouping>
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
 8001038:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800103e:	f7ff ff61 	bl	8000f04 <__NVIC_GetPriorityGrouping>
 8001042:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	68b9      	ldr	r1, [r7, #8]
 8001048:	6978      	ldr	r0, [r7, #20]
 800104a:	f7ff ffb1 	bl	8000fb0 <NVIC_EncodePriority>
 800104e:	4602      	mov	r2, r0
 8001050:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001054:	4611      	mov	r1, r2
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ff80 	bl	8000f5c <__NVIC_SetPriority>
}
 800105c:	bf00      	nop
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ff54 	bl	8000f20 <__NVIC_EnableIRQ>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800108c:	f7ff ff0a 	bl	8000ea4 <HAL_GetTick>
 8001090:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d101      	bne.n	800109c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e099      	b.n	80011d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2202      	movs	r2, #2
 80010a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 0201 	bic.w	r2, r2, #1
 80010ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010bc:	e00f      	b.n	80010de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010be:	f7ff fef1 	bl	8000ea4 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b05      	cmp	r3, #5
 80010ca:	d908      	bls.n	80010de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2220      	movs	r2, #32
 80010d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2203      	movs	r2, #3
 80010d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e078      	b.n	80011d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1e8      	bne.n	80010be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	4b38      	ldr	r3, [pc, #224]	; (80011d8 <HAL_DMA_Init+0x158>)
 80010f8:	4013      	ands	r3, r2
 80010fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800110a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001116:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001122:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	4313      	orrs	r3, r2
 800112e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001134:	2b04      	cmp	r3, #4
 8001136:	d107      	bne.n	8001148 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001140:	4313      	orrs	r3, r2
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	4313      	orrs	r3, r2
 8001146:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	697a      	ldr	r2, [r7, #20]
 800114e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	f023 0307 	bic.w	r3, r3, #7
 800115e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001164:	697a      	ldr	r2, [r7, #20]
 8001166:	4313      	orrs	r3, r2
 8001168:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116e:	2b04      	cmp	r3, #4
 8001170:	d117      	bne.n	80011a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	4313      	orrs	r3, r2
 800117a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001180:	2b00      	cmp	r3, #0
 8001182:	d00e      	beq.n	80011a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 fa7b 	bl	8001680 <DMA_CheckFifoParam>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d008      	beq.n	80011a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2240      	movs	r2, #64	; 0x40
 8001194:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2201      	movs	r2, #1
 800119a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800119e:	2301      	movs	r3, #1
 80011a0:	e016      	b.n	80011d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f000 fa32 	bl	8001614 <DMA_CalcBaseAndBitshift>
 80011b0:	4603      	mov	r3, r0
 80011b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b8:	223f      	movs	r2, #63	; 0x3f
 80011ba:	409a      	lsls	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2201      	movs	r2, #1
 80011ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	f010803f 	.word	0xf010803f

080011dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011ea:	f7ff fe5b 	bl	8000ea4 <HAL_GetTick>
 80011ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d008      	beq.n	800120e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2280      	movs	r2, #128	; 0x80
 8001200:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e052      	b.n	80012b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 0216 	bic.w	r2, r2, #22
 800121c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	695a      	ldr	r2, [r3, #20]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800122c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	2b00      	cmp	r3, #0
 8001234:	d103      	bne.n	800123e <HAL_DMA_Abort+0x62>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800123a:	2b00      	cmp	r3, #0
 800123c:	d007      	beq.n	800124e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 0208 	bic.w	r2, r2, #8
 800124c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 0201 	bic.w	r2, r2, #1
 800125c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800125e:	e013      	b.n	8001288 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001260:	f7ff fe20 	bl	8000ea4 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b05      	cmp	r3, #5
 800126c:	d90c      	bls.n	8001288 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2220      	movs	r2, #32
 8001272:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2203      	movs	r2, #3
 8001278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e015      	b.n	80012b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1e4      	bne.n	8001260 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800129a:	223f      	movs	r2, #63	; 0x3f
 800129c:	409a      	lsls	r2, r3
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2201      	movs	r2, #1
 80012a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d004      	beq.n	80012da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2280      	movs	r2, #128	; 0x80
 80012d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e00c      	b.n	80012f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2205      	movs	r2, #5
 80012de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f022 0201 	bic.w	r2, r2, #1
 80012f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800130c:	4b8e      	ldr	r3, [pc, #568]	; (8001548 <HAL_DMA_IRQHandler+0x248>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a8e      	ldr	r2, [pc, #568]	; (800154c <HAL_DMA_IRQHandler+0x24c>)
 8001312:	fba2 2303 	umull	r2, r3, r2, r3
 8001316:	0a9b      	lsrs	r3, r3, #10
 8001318:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800132a:	2208      	movs	r2, #8
 800132c:	409a      	lsls	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4013      	ands	r3, r2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d01a      	beq.n	800136c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	2b00      	cmp	r3, #0
 8001342:	d013      	beq.n	800136c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 0204 	bic.w	r2, r2, #4
 8001352:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001358:	2208      	movs	r2, #8
 800135a:	409a      	lsls	r2, r3
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001364:	f043 0201 	orr.w	r2, r3, #1
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001370:	2201      	movs	r2, #1
 8001372:	409a      	lsls	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4013      	ands	r3, r2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d012      	beq.n	80013a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001386:	2b00      	cmp	r3, #0
 8001388:	d00b      	beq.n	80013a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800138e:	2201      	movs	r2, #1
 8001390:	409a      	lsls	r2, r3
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800139a:	f043 0202 	orr.w	r2, r3, #2
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a6:	2204      	movs	r2, #4
 80013a8:	409a      	lsls	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4013      	ands	r3, r2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d012      	beq.n	80013d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d00b      	beq.n	80013d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c4:	2204      	movs	r2, #4
 80013c6:	409a      	lsls	r2, r3
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d0:	f043 0204 	orr.w	r2, r3, #4
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013dc:	2210      	movs	r2, #16
 80013de:	409a      	lsls	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d043      	beq.n	8001470 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d03c      	beq.n	8001470 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013fa:	2210      	movs	r2, #16
 80013fc:	409a      	lsls	r2, r3
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d018      	beq.n	8001442 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d108      	bne.n	8001430 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	2b00      	cmp	r3, #0
 8001424:	d024      	beq.n	8001470 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	4798      	blx	r3
 800142e:	e01f      	b.n	8001470 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001434:	2b00      	cmp	r3, #0
 8001436:	d01b      	beq.n	8001470 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	4798      	blx	r3
 8001440:	e016      	b.n	8001470 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144c:	2b00      	cmp	r3, #0
 800144e:	d107      	bne.n	8001460 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f022 0208 	bic.w	r2, r2, #8
 800145e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001474:	2220      	movs	r2, #32
 8001476:	409a      	lsls	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4013      	ands	r3, r2
 800147c:	2b00      	cmp	r3, #0
 800147e:	f000 808f 	beq.w	80015a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0310 	and.w	r3, r3, #16
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 8087 	beq.w	80015a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001496:	2220      	movs	r2, #32
 8001498:	409a      	lsls	r2, r3
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b05      	cmp	r3, #5
 80014a8:	d136      	bne.n	8001518 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f022 0216 	bic.w	r2, r2, #22
 80014b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	695a      	ldr	r2, [r3, #20]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d103      	bne.n	80014da <HAL_DMA_IRQHandler+0x1da>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d007      	beq.n	80014ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 0208 	bic.w	r2, r2, #8
 80014e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ee:	223f      	movs	r2, #63	; 0x3f
 80014f0:	409a      	lsls	r2, r3
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800150a:	2b00      	cmp	r3, #0
 800150c:	d07e      	beq.n	800160c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	4798      	blx	r3
        }
        return;
 8001516:	e079      	b.n	800160c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d01d      	beq.n	8001562 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d10d      	bne.n	8001550 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001538:	2b00      	cmp	r3, #0
 800153a:	d031      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	4798      	blx	r3
 8001544:	e02c      	b.n	80015a0 <HAL_DMA_IRQHandler+0x2a0>
 8001546:	bf00      	nop
 8001548:	20000004 	.word	0x20000004
 800154c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001554:	2b00      	cmp	r3, #0
 8001556:	d023      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	4798      	blx	r3
 8001560:	e01e      	b.n	80015a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156c:	2b00      	cmp	r3, #0
 800156e:	d10f      	bne.n	8001590 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 0210 	bic.w	r2, r2, #16
 800157e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d032      	beq.n	800160e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d022      	beq.n	80015fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2205      	movs	r2, #5
 80015b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 0201 	bic.w	r2, r2, #1
 80015ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	3301      	adds	r3, #1
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d307      	bcc.n	80015e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f2      	bne.n	80015cc <HAL_DMA_IRQHandler+0x2cc>
 80015e6:	e000      	b.n	80015ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80015e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2201      	movs	r2, #1
 80015ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d005      	beq.n	800160e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	4798      	blx	r3
 800160a:	e000      	b.n	800160e <HAL_DMA_IRQHandler+0x30e>
        return;
 800160c:	bf00      	nop
    }
  }
}
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	3b10      	subs	r3, #16
 8001624:	4a14      	ldr	r2, [pc, #80]	; (8001678 <DMA_CalcBaseAndBitshift+0x64>)
 8001626:	fba2 2303 	umull	r2, r3, r2, r3
 800162a:	091b      	lsrs	r3, r3, #4
 800162c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800162e:	4a13      	ldr	r2, [pc, #76]	; (800167c <DMA_CalcBaseAndBitshift+0x68>)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4413      	add	r3, r2
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2b03      	cmp	r3, #3
 8001640:	d909      	bls.n	8001656 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800164a:	f023 0303 	bic.w	r3, r3, #3
 800164e:	1d1a      	adds	r2, r3, #4
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	659a      	str	r2, [r3, #88]	; 0x58
 8001654:	e007      	b.n	8001666 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800165e:	f023 0303 	bic.w	r3, r3, #3
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	aaaaaaab 	.word	0xaaaaaaab
 800167c:	08005cf8 	.word	0x08005cf8

08001680 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001688:	2300      	movs	r3, #0
 800168a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001690:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d11f      	bne.n	80016da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	2b03      	cmp	r3, #3
 800169e:	d856      	bhi.n	800174e <DMA_CheckFifoParam+0xce>
 80016a0:	a201      	add	r2, pc, #4	; (adr r2, 80016a8 <DMA_CheckFifoParam+0x28>)
 80016a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a6:	bf00      	nop
 80016a8:	080016b9 	.word	0x080016b9
 80016ac:	080016cb 	.word	0x080016cb
 80016b0:	080016b9 	.word	0x080016b9
 80016b4:	0800174f 	.word	0x0800174f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d046      	beq.n	8001752 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016c8:	e043      	b.n	8001752 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016d2:	d140      	bne.n	8001756 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016d8:	e03d      	b.n	8001756 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016e2:	d121      	bne.n	8001728 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	2b03      	cmp	r3, #3
 80016e8:	d837      	bhi.n	800175a <DMA_CheckFifoParam+0xda>
 80016ea:	a201      	add	r2, pc, #4	; (adr r2, 80016f0 <DMA_CheckFifoParam+0x70>)
 80016ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f0:	08001701 	.word	0x08001701
 80016f4:	08001707 	.word	0x08001707
 80016f8:	08001701 	.word	0x08001701
 80016fc:	08001719 	.word	0x08001719
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	73fb      	strb	r3, [r7, #15]
      break;
 8001704:	e030      	b.n	8001768 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d025      	beq.n	800175e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001716:	e022      	b.n	800175e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001720:	d11f      	bne.n	8001762 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001726:	e01c      	b.n	8001762 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d903      	bls.n	8001736 <DMA_CheckFifoParam+0xb6>
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	2b03      	cmp	r3, #3
 8001732:	d003      	beq.n	800173c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001734:	e018      	b.n	8001768 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	73fb      	strb	r3, [r7, #15]
      break;
 800173a:	e015      	b.n	8001768 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001740:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00e      	beq.n	8001766 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	73fb      	strb	r3, [r7, #15]
      break;
 800174c:	e00b      	b.n	8001766 <DMA_CheckFifoParam+0xe6>
      break;
 800174e:	bf00      	nop
 8001750:	e00a      	b.n	8001768 <DMA_CheckFifoParam+0xe8>
      break;
 8001752:	bf00      	nop
 8001754:	e008      	b.n	8001768 <DMA_CheckFifoParam+0xe8>
      break;
 8001756:	bf00      	nop
 8001758:	e006      	b.n	8001768 <DMA_CheckFifoParam+0xe8>
      break;
 800175a:	bf00      	nop
 800175c:	e004      	b.n	8001768 <DMA_CheckFifoParam+0xe8>
      break;
 800175e:	bf00      	nop
 8001760:	e002      	b.n	8001768 <DMA_CheckFifoParam+0xe8>
      break;   
 8001762:	bf00      	nop
 8001764:	e000      	b.n	8001768 <DMA_CheckFifoParam+0xe8>
      break;
 8001766:	bf00      	nop
    }
  } 
  
  return status; 
 8001768:	7bfb      	ldrb	r3, [r7, #15]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop

08001778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001778:	b480      	push	{r7}
 800177a:	b089      	sub	sp, #36	; 0x24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800178a:	2300      	movs	r3, #0
 800178c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
 8001792:	e16b      	b.n	8001a6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001794:	2201      	movs	r2, #1
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	4013      	ands	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	f040 815a 	bne.w	8001a66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d005      	beq.n	80017ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d130      	bne.n	800182c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	2203      	movs	r2, #3
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	68da      	ldr	r2, [r3, #12]
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001800:	2201      	movs	r2, #1
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	091b      	lsrs	r3, r3, #4
 8001816:	f003 0201 	and.w	r2, r3, #1
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 0303 	and.w	r3, r3, #3
 8001834:	2b03      	cmp	r3, #3
 8001836:	d017      	beq.n	8001868 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	2203      	movs	r2, #3
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4313      	orrs	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d123      	bne.n	80018bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	08da      	lsrs	r2, r3, #3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3208      	adds	r2, #8
 800187c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001880:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	220f      	movs	r2, #15
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4013      	ands	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	08da      	lsrs	r2, r3, #3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3208      	adds	r2, #8
 80018b6:	69b9      	ldr	r1, [r7, #24]
 80018b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	2203      	movs	r2, #3
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 0203 	and.w	r2, r3, #3
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 80b4 	beq.w	8001a66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	4b60      	ldr	r3, [pc, #384]	; (8001a84 <HAL_GPIO_Init+0x30c>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	4a5f      	ldr	r2, [pc, #380]	; (8001a84 <HAL_GPIO_Init+0x30c>)
 8001908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800190c:	6453      	str	r3, [r2, #68]	; 0x44
 800190e:	4b5d      	ldr	r3, [pc, #372]	; (8001a84 <HAL_GPIO_Init+0x30c>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800191a:	4a5b      	ldr	r2, [pc, #364]	; (8001a88 <HAL_GPIO_Init+0x310>)
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	089b      	lsrs	r3, r3, #2
 8001920:	3302      	adds	r3, #2
 8001922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001926:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f003 0303 	and.w	r3, r3, #3
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	220f      	movs	r2, #15
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43db      	mvns	r3, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4013      	ands	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a52      	ldr	r2, [pc, #328]	; (8001a8c <HAL_GPIO_Init+0x314>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d02b      	beq.n	800199e <HAL_GPIO_Init+0x226>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a51      	ldr	r2, [pc, #324]	; (8001a90 <HAL_GPIO_Init+0x318>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d025      	beq.n	800199a <HAL_GPIO_Init+0x222>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a50      	ldr	r2, [pc, #320]	; (8001a94 <HAL_GPIO_Init+0x31c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d01f      	beq.n	8001996 <HAL_GPIO_Init+0x21e>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a4f      	ldr	r2, [pc, #316]	; (8001a98 <HAL_GPIO_Init+0x320>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d019      	beq.n	8001992 <HAL_GPIO_Init+0x21a>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a4e      	ldr	r2, [pc, #312]	; (8001a9c <HAL_GPIO_Init+0x324>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d013      	beq.n	800198e <HAL_GPIO_Init+0x216>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a4d      	ldr	r2, [pc, #308]	; (8001aa0 <HAL_GPIO_Init+0x328>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d00d      	beq.n	800198a <HAL_GPIO_Init+0x212>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a4c      	ldr	r2, [pc, #304]	; (8001aa4 <HAL_GPIO_Init+0x32c>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d007      	beq.n	8001986 <HAL_GPIO_Init+0x20e>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a4b      	ldr	r2, [pc, #300]	; (8001aa8 <HAL_GPIO_Init+0x330>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d101      	bne.n	8001982 <HAL_GPIO_Init+0x20a>
 800197e:	2307      	movs	r3, #7
 8001980:	e00e      	b.n	80019a0 <HAL_GPIO_Init+0x228>
 8001982:	2308      	movs	r3, #8
 8001984:	e00c      	b.n	80019a0 <HAL_GPIO_Init+0x228>
 8001986:	2306      	movs	r3, #6
 8001988:	e00a      	b.n	80019a0 <HAL_GPIO_Init+0x228>
 800198a:	2305      	movs	r3, #5
 800198c:	e008      	b.n	80019a0 <HAL_GPIO_Init+0x228>
 800198e:	2304      	movs	r3, #4
 8001990:	e006      	b.n	80019a0 <HAL_GPIO_Init+0x228>
 8001992:	2303      	movs	r3, #3
 8001994:	e004      	b.n	80019a0 <HAL_GPIO_Init+0x228>
 8001996:	2302      	movs	r3, #2
 8001998:	e002      	b.n	80019a0 <HAL_GPIO_Init+0x228>
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <HAL_GPIO_Init+0x228>
 800199e:	2300      	movs	r3, #0
 80019a0:	69fa      	ldr	r2, [r7, #28]
 80019a2:	f002 0203 	and.w	r2, r2, #3
 80019a6:	0092      	lsls	r2, r2, #2
 80019a8:	4093      	lsls	r3, r2
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019b0:	4935      	ldr	r1, [pc, #212]	; (8001a88 <HAL_GPIO_Init+0x310>)
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	089b      	lsrs	r3, r3, #2
 80019b6:	3302      	adds	r3, #2
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019be:	4b3b      	ldr	r3, [pc, #236]	; (8001aac <HAL_GPIO_Init+0x334>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019e2:	4a32      	ldr	r2, [pc, #200]	; (8001aac <HAL_GPIO_Init+0x334>)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019e8:	4b30      	ldr	r3, [pc, #192]	; (8001aac <HAL_GPIO_Init+0x334>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a0c:	4a27      	ldr	r2, [pc, #156]	; (8001aac <HAL_GPIO_Init+0x334>)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a12:	4b26      	ldr	r3, [pc, #152]	; (8001aac <HAL_GPIO_Init+0x334>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a36:	4a1d      	ldr	r2, [pc, #116]	; (8001aac <HAL_GPIO_Init+0x334>)
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <HAL_GPIO_Init+0x334>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a60:	4a12      	ldr	r2, [pc, #72]	; (8001aac <HAL_GPIO_Init+0x334>)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	61fb      	str	r3, [r7, #28]
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	2b0f      	cmp	r3, #15
 8001a70:	f67f ae90 	bls.w	8001794 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop
 8001a78:	3724      	adds	r7, #36	; 0x24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40013800 	.word	0x40013800
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	40020400 	.word	0x40020400
 8001a94:	40020800 	.word	0x40020800
 8001a98:	40020c00 	.word	0x40020c00
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40021400 	.word	0x40021400
 8001aa4:	40021800 	.word	0x40021800
 8001aa8:	40021c00 	.word	0x40021c00
 8001aac:	40013c00 	.word	0x40013c00

08001ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	807b      	strh	r3, [r7, #2]
 8001abc:	4613      	mov	r3, r2
 8001abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ac0:	787b      	ldrb	r3, [r7, #1]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ac6:	887a      	ldrh	r2, [r7, #2]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001acc:	e003      	b.n	8001ad6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ace:	887b      	ldrh	r3, [r7, #2]
 8001ad0:	041a      	lsls	r2, r3, #16
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	619a      	str	r2, [r3, #24]
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b085      	sub	sp, #20
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	460b      	mov	r3, r1
 8001aec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001af4:	887a      	ldrh	r2, [r7, #2]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4013      	ands	r3, r2
 8001afa:	041a      	lsls	r2, r3, #16
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	43d9      	mvns	r1, r3
 8001b00:	887b      	ldrh	r3, [r7, #2]
 8001b02:	400b      	ands	r3, r1
 8001b04:	431a      	orrs	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	619a      	str	r2, [r3, #24]
}
 8001b0a:	bf00      	nop
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
	...

08001b18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e267      	b.n	8001ffa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d075      	beq.n	8001c22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b36:	4b88      	ldr	r3, [pc, #544]	; (8001d58 <HAL_RCC_OscConfig+0x240>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	d00c      	beq.n	8001b5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b42:	4b85      	ldr	r3, [pc, #532]	; (8001d58 <HAL_RCC_OscConfig+0x240>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b4a:	2b08      	cmp	r3, #8
 8001b4c:	d112      	bne.n	8001b74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b4e:	4b82      	ldr	r3, [pc, #520]	; (8001d58 <HAL_RCC_OscConfig+0x240>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b5a:	d10b      	bne.n	8001b74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5c:	4b7e      	ldr	r3, [pc, #504]	; (8001d58 <HAL_RCC_OscConfig+0x240>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d05b      	beq.n	8001c20 <HAL_RCC_OscConfig+0x108>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d157      	bne.n	8001c20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e242      	b.n	8001ffa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b7c:	d106      	bne.n	8001b8c <HAL_RCC_OscConfig+0x74>
 8001b7e:	4b76      	ldr	r3, [pc, #472]	; (8001d58 <HAL_RCC_OscConfig+0x240>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a75      	ldr	r2, [pc, #468]	; (8001d58 <HAL_RCC_OscConfig+0x240>)
 8001b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	e01d      	b.n	8001bc8 <HAL_RCC_OscConfig+0xb0>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b94:	d10c      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x98>
 8001b96:	4b70      	ldr	r3, [pc, #448]	; (8001d58 <HAL_RCC_OscConfig+0x240>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a6f      	ldr	r2, [pc, #444]	; (8001d58 <HAL_RCC_OscConfig+0x240>)
 8001b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	4b6d      	ldr	r3, [pc, #436]	; (8001d58 <HAL_RCC_OscConfig+0x240>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a6c      	ldr	r2, [pc, #432]	; (8001d58 <HAL_RCC_OscConfig+0x240>)
 8001ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	e00b      	b.n	8001bc8 <HAL_RCC_OscConfig+0xb0>
 8001bb0:	4b69      	ldr	r3, [pc, #420]	; (8001d58 <HAL_RCC_OscConfig+0x240>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a68      	ldr	r2, [pc, #416]	; (8001d58 <HAL_RCC_OscConfig+0x240>)
 8001bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	4b66      	ldr	r3, [pc, #408]	; (8001d58 <HAL_RCC_OscConfig+0x240>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a65      	ldr	r2, [pc, #404]	; (8001d58 <HAL_RCC_OscConfig+0x240>)
 8001bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d013      	beq.n	8001bf8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd0:	f7ff f968 	bl	8000ea4 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bd8:	f7ff f964 	bl	8000ea4 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b64      	cmp	r3, #100	; 0x64
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e207      	b.n	8001ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bea:	4b5b      	ldr	r3, [pc, #364]	; (8001d58 <HAL_RCC_OscConfig+0x240>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0f0      	beq.n	8001bd8 <HAL_RCC_OscConfig+0xc0>
 8001bf6:	e014      	b.n	8001c22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf8:	f7ff f954 	bl	8000ea4 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c00:	f7ff f950 	bl	8000ea4 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b64      	cmp	r3, #100	; 0x64
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e1f3      	b.n	8001ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c12:	4b51      	ldr	r3, [pc, #324]	; (8001d58 <HAL_RCC_OscConfig+0x240>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f0      	bne.n	8001c00 <HAL_RCC_OscConfig+0xe8>
 8001c1e:	e000      	b.n	8001c22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d063      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c2e:	4b4a      	ldr	r3, [pc, #296]	; (8001d58 <HAL_RCC_OscConfig+0x240>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00b      	beq.n	8001c52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c3a:	4b47      	ldr	r3, [pc, #284]	; (8001d58 <HAL_RCC_OscConfig+0x240>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c42:	2b08      	cmp	r3, #8
 8001c44:	d11c      	bne.n	8001c80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c46:	4b44      	ldr	r3, [pc, #272]	; (8001d58 <HAL_RCC_OscConfig+0x240>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d116      	bne.n	8001c80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c52:	4b41      	ldr	r3, [pc, #260]	; (8001d58 <HAL_RCC_OscConfig+0x240>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d005      	beq.n	8001c6a <HAL_RCC_OscConfig+0x152>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d001      	beq.n	8001c6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e1c7      	b.n	8001ffa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6a:	4b3b      	ldr	r3, [pc, #236]	; (8001d58 <HAL_RCC_OscConfig+0x240>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	4937      	ldr	r1, [pc, #220]	; (8001d58 <HAL_RCC_OscConfig+0x240>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7e:	e03a      	b.n	8001cf6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d020      	beq.n	8001cca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c88:	4b34      	ldr	r3, [pc, #208]	; (8001d5c <HAL_RCC_OscConfig+0x244>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8e:	f7ff f909 	bl	8000ea4 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c96:	f7ff f905 	bl	8000ea4 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e1a8      	b.n	8001ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca8:	4b2b      	ldr	r3, [pc, #172]	; (8001d58 <HAL_RCC_OscConfig+0x240>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0f0      	beq.n	8001c96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb4:	4b28      	ldr	r3, [pc, #160]	; (8001d58 <HAL_RCC_OscConfig+0x240>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4925      	ldr	r1, [pc, #148]	; (8001d58 <HAL_RCC_OscConfig+0x240>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	600b      	str	r3, [r1, #0]
 8001cc8:	e015      	b.n	8001cf6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cca:	4b24      	ldr	r3, [pc, #144]	; (8001d5c <HAL_RCC_OscConfig+0x244>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd0:	f7ff f8e8 	bl	8000ea4 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd8:	f7ff f8e4 	bl	8000ea4 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e187      	b.n	8001ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cea:	4b1b      	ldr	r3, [pc, #108]	; (8001d58 <HAL_RCC_OscConfig+0x240>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d036      	beq.n	8001d70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d016      	beq.n	8001d38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d0a:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <HAL_RCC_OscConfig+0x248>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d10:	f7ff f8c8 	bl	8000ea4 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d18:	f7ff f8c4 	bl	8000ea4 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e167      	b.n	8001ffa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_RCC_OscConfig+0x240>)
 8001d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0x200>
 8001d36:	e01b      	b.n	8001d70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d38:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <HAL_RCC_OscConfig+0x248>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3e:	f7ff f8b1 	bl	8000ea4 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d44:	e00e      	b.n	8001d64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d46:	f7ff f8ad 	bl	8000ea4 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d907      	bls.n	8001d64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e150      	b.n	8001ffa <HAL_RCC_OscConfig+0x4e2>
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	42470000 	.word	0x42470000
 8001d60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d64:	4b88      	ldr	r3, [pc, #544]	; (8001f88 <HAL_RCC_OscConfig+0x470>)
 8001d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1ea      	bne.n	8001d46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 8097 	beq.w	8001eac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d82:	4b81      	ldr	r3, [pc, #516]	; (8001f88 <HAL_RCC_OscConfig+0x470>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10f      	bne.n	8001dae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	4b7d      	ldr	r3, [pc, #500]	; (8001f88 <HAL_RCC_OscConfig+0x470>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	4a7c      	ldr	r2, [pc, #496]	; (8001f88 <HAL_RCC_OscConfig+0x470>)
 8001d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9e:	4b7a      	ldr	r3, [pc, #488]	; (8001f88 <HAL_RCC_OscConfig+0x470>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001daa:	2301      	movs	r3, #1
 8001dac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dae:	4b77      	ldr	r3, [pc, #476]	; (8001f8c <HAL_RCC_OscConfig+0x474>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d118      	bne.n	8001dec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dba:	4b74      	ldr	r3, [pc, #464]	; (8001f8c <HAL_RCC_OscConfig+0x474>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a73      	ldr	r2, [pc, #460]	; (8001f8c <HAL_RCC_OscConfig+0x474>)
 8001dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dc6:	f7ff f86d 	bl	8000ea4 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dce:	f7ff f869 	bl	8000ea4 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e10c      	b.n	8001ffa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de0:	4b6a      	ldr	r3, [pc, #424]	; (8001f8c <HAL_RCC_OscConfig+0x474>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0f0      	beq.n	8001dce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d106      	bne.n	8001e02 <HAL_RCC_OscConfig+0x2ea>
 8001df4:	4b64      	ldr	r3, [pc, #400]	; (8001f88 <HAL_RCC_OscConfig+0x470>)
 8001df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df8:	4a63      	ldr	r2, [pc, #396]	; (8001f88 <HAL_RCC_OscConfig+0x470>)
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8001e00:	e01c      	b.n	8001e3c <HAL_RCC_OscConfig+0x324>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b05      	cmp	r3, #5
 8001e08:	d10c      	bne.n	8001e24 <HAL_RCC_OscConfig+0x30c>
 8001e0a:	4b5f      	ldr	r3, [pc, #380]	; (8001f88 <HAL_RCC_OscConfig+0x470>)
 8001e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0e:	4a5e      	ldr	r2, [pc, #376]	; (8001f88 <HAL_RCC_OscConfig+0x470>)
 8001e10:	f043 0304 	orr.w	r3, r3, #4
 8001e14:	6713      	str	r3, [r2, #112]	; 0x70
 8001e16:	4b5c      	ldr	r3, [pc, #368]	; (8001f88 <HAL_RCC_OscConfig+0x470>)
 8001e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1a:	4a5b      	ldr	r2, [pc, #364]	; (8001f88 <HAL_RCC_OscConfig+0x470>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6713      	str	r3, [r2, #112]	; 0x70
 8001e22:	e00b      	b.n	8001e3c <HAL_RCC_OscConfig+0x324>
 8001e24:	4b58      	ldr	r3, [pc, #352]	; (8001f88 <HAL_RCC_OscConfig+0x470>)
 8001e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e28:	4a57      	ldr	r2, [pc, #348]	; (8001f88 <HAL_RCC_OscConfig+0x470>)
 8001e2a:	f023 0301 	bic.w	r3, r3, #1
 8001e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e30:	4b55      	ldr	r3, [pc, #340]	; (8001f88 <HAL_RCC_OscConfig+0x470>)
 8001e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e34:	4a54      	ldr	r2, [pc, #336]	; (8001f88 <HAL_RCC_OscConfig+0x470>)
 8001e36:	f023 0304 	bic.w	r3, r3, #4
 8001e3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d015      	beq.n	8001e70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e44:	f7ff f82e 	bl	8000ea4 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e4a:	e00a      	b.n	8001e62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e4c:	f7ff f82a 	bl	8000ea4 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e0cb      	b.n	8001ffa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e62:	4b49      	ldr	r3, [pc, #292]	; (8001f88 <HAL_RCC_OscConfig+0x470>)
 8001e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0ee      	beq.n	8001e4c <HAL_RCC_OscConfig+0x334>
 8001e6e:	e014      	b.n	8001e9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e70:	f7ff f818 	bl	8000ea4 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e76:	e00a      	b.n	8001e8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e78:	f7ff f814 	bl	8000ea4 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e0b5      	b.n	8001ffa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e8e:	4b3e      	ldr	r3, [pc, #248]	; (8001f88 <HAL_RCC_OscConfig+0x470>)
 8001e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1ee      	bne.n	8001e78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e9a:	7dfb      	ldrb	r3, [r7, #23]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d105      	bne.n	8001eac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea0:	4b39      	ldr	r3, [pc, #228]	; (8001f88 <HAL_RCC_OscConfig+0x470>)
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	4a38      	ldr	r2, [pc, #224]	; (8001f88 <HAL_RCC_OscConfig+0x470>)
 8001ea6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 80a1 	beq.w	8001ff8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001eb6:	4b34      	ldr	r3, [pc, #208]	; (8001f88 <HAL_RCC_OscConfig+0x470>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 030c 	and.w	r3, r3, #12
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d05c      	beq.n	8001f7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d141      	bne.n	8001f4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eca:	4b31      	ldr	r3, [pc, #196]	; (8001f90 <HAL_RCC_OscConfig+0x478>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed0:	f7fe ffe8 	bl	8000ea4 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed8:	f7fe ffe4 	bl	8000ea4 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e087      	b.n	8001ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eea:	4b27      	ldr	r3, [pc, #156]	; (8001f88 <HAL_RCC_OscConfig+0x470>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f0      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69da      	ldr	r2, [r3, #28]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	019b      	lsls	r3, r3, #6
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0c:	085b      	lsrs	r3, r3, #1
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	041b      	lsls	r3, r3, #16
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f18:	061b      	lsls	r3, r3, #24
 8001f1a:	491b      	ldr	r1, [pc, #108]	; (8001f88 <HAL_RCC_OscConfig+0x470>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f20:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <HAL_RCC_OscConfig+0x478>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f26:	f7fe ffbd 	bl	8000ea4 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f2e:	f7fe ffb9 	bl	8000ea4 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e05c      	b.n	8001ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f40:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <HAL_RCC_OscConfig+0x470>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0f0      	beq.n	8001f2e <HAL_RCC_OscConfig+0x416>
 8001f4c:	e054      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4e:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <HAL_RCC_OscConfig+0x478>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7fe ffa6 	bl	8000ea4 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f5c:	f7fe ffa2 	bl	8000ea4 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e045      	b.n	8001ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f6e:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_RCC_OscConfig+0x470>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0x444>
 8001f7a:	e03d      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d107      	bne.n	8001f94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e038      	b.n	8001ffa <HAL_RCC_OscConfig+0x4e2>
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40007000 	.word	0x40007000
 8001f90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f94:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <HAL_RCC_OscConfig+0x4ec>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d028      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d121      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d11a      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d111      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fda:	085b      	lsrs	r3, r3, #1
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d107      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d001      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e000      	b.n	8001ffa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800

08002008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0cc      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800201c:	4b68      	ldr	r3, [pc, #416]	; (80021c0 <HAL_RCC_ClockConfig+0x1b8>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	d90c      	bls.n	8002044 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202a:	4b65      	ldr	r3, [pc, #404]	; (80021c0 <HAL_RCC_ClockConfig+0x1b8>)
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002032:	4b63      	ldr	r3, [pc, #396]	; (80021c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	d001      	beq.n	8002044 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0b8      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d020      	beq.n	8002092 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800205c:	4b59      	ldr	r3, [pc, #356]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	4a58      	ldr	r2, [pc, #352]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002066:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0308 	and.w	r3, r3, #8
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002074:	4b53      	ldr	r3, [pc, #332]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	4a52      	ldr	r2, [pc, #328]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 800207a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800207e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002080:	4b50      	ldr	r3, [pc, #320]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	494d      	ldr	r1, [pc, #308]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	4313      	orrs	r3, r2
 8002090:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d044      	beq.n	8002128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d107      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a6:	4b47      	ldr	r3, [pc, #284]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d119      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e07f      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d003      	beq.n	80020c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d107      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c6:	4b3f      	ldr	r3, [pc, #252]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d109      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e06f      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d6:	4b3b      	ldr	r3, [pc, #236]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e067      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020e6:	4b37      	ldr	r3, [pc, #220]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f023 0203 	bic.w	r2, r3, #3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	4934      	ldr	r1, [pc, #208]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f8:	f7fe fed4 	bl	8000ea4 <HAL_GetTick>
 80020fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fe:	e00a      	b.n	8002116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002100:	f7fe fed0 	bl	8000ea4 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f241 3288 	movw	r2, #5000	; 0x1388
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e04f      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002116:	4b2b      	ldr	r3, [pc, #172]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 020c 	and.w	r2, r3, #12
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	429a      	cmp	r2, r3
 8002126:	d1eb      	bne.n	8002100 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002128:	4b25      	ldr	r3, [pc, #148]	; (80021c0 <HAL_RCC_ClockConfig+0x1b8>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d20c      	bcs.n	8002150 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002136:	4b22      	ldr	r3, [pc, #136]	; (80021c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800213e:	4b20      	ldr	r3, [pc, #128]	; (80021c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d001      	beq.n	8002150 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e032      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b00      	cmp	r3, #0
 800215a:	d008      	beq.n	800216e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800215c:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	4916      	ldr	r1, [pc, #88]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	4313      	orrs	r3, r2
 800216c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d009      	beq.n	800218e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800217a:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	490e      	ldr	r1, [pc, #56]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	4313      	orrs	r3, r2
 800218c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800218e:	f000 f821 	bl	80021d4 <HAL_RCC_GetSysClockFreq>
 8002192:	4602      	mov	r2, r0
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	091b      	lsrs	r3, r3, #4
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	490a      	ldr	r1, [pc, #40]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	5ccb      	ldrb	r3, [r1, r3]
 80021a2:	fa22 f303 	lsr.w	r3, r2, r3
 80021a6:	4a09      	ldr	r2, [pc, #36]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <HAL_RCC_ClockConfig+0x1c8>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe fd4c 	bl	8000c4c <HAL_InitTick>

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40023c00 	.word	0x40023c00
 80021c4:	40023800 	.word	0x40023800
 80021c8:	08005ce0 	.word	0x08005ce0
 80021cc:	20000004 	.word	0x20000004
 80021d0:	20000008 	.word	0x20000008

080021d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021d8:	b094      	sub	sp, #80	; 0x50
 80021da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	647b      	str	r3, [r7, #68]	; 0x44
 80021e0:	2300      	movs	r3, #0
 80021e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021e4:	2300      	movs	r3, #0
 80021e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021ec:	4b79      	ldr	r3, [pc, #484]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 030c 	and.w	r3, r3, #12
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d00d      	beq.n	8002214 <HAL_RCC_GetSysClockFreq+0x40>
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	f200 80e1 	bhi.w	80023c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <HAL_RCC_GetSysClockFreq+0x34>
 8002202:	2b04      	cmp	r3, #4
 8002204:	d003      	beq.n	800220e <HAL_RCC_GetSysClockFreq+0x3a>
 8002206:	e0db      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002208:	4b73      	ldr	r3, [pc, #460]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800220a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800220c:	e0db      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800220e:	4b73      	ldr	r3, [pc, #460]	; (80023dc <HAL_RCC_GetSysClockFreq+0x208>)
 8002210:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002212:	e0d8      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002214:	4b6f      	ldr	r3, [pc, #444]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800221c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800221e:	4b6d      	ldr	r3, [pc, #436]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d063      	beq.n	80022f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800222a:	4b6a      	ldr	r3, [pc, #424]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	099b      	lsrs	r3, r3, #6
 8002230:	2200      	movs	r2, #0
 8002232:	63bb      	str	r3, [r7, #56]	; 0x38
 8002234:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800223c:	633b      	str	r3, [r7, #48]	; 0x30
 800223e:	2300      	movs	r3, #0
 8002240:	637b      	str	r3, [r7, #52]	; 0x34
 8002242:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002246:	4622      	mov	r2, r4
 8002248:	462b      	mov	r3, r5
 800224a:	f04f 0000 	mov.w	r0, #0
 800224e:	f04f 0100 	mov.w	r1, #0
 8002252:	0159      	lsls	r1, r3, #5
 8002254:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002258:	0150      	lsls	r0, r2, #5
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4621      	mov	r1, r4
 8002260:	1a51      	subs	r1, r2, r1
 8002262:	6139      	str	r1, [r7, #16]
 8002264:	4629      	mov	r1, r5
 8002266:	eb63 0301 	sbc.w	r3, r3, r1
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	f04f 0300 	mov.w	r3, #0
 8002274:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002278:	4659      	mov	r1, fp
 800227a:	018b      	lsls	r3, r1, #6
 800227c:	4651      	mov	r1, sl
 800227e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002282:	4651      	mov	r1, sl
 8002284:	018a      	lsls	r2, r1, #6
 8002286:	4651      	mov	r1, sl
 8002288:	ebb2 0801 	subs.w	r8, r2, r1
 800228c:	4659      	mov	r1, fp
 800228e:	eb63 0901 	sbc.w	r9, r3, r1
 8002292:	f04f 0200 	mov.w	r2, #0
 8002296:	f04f 0300 	mov.w	r3, #0
 800229a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800229e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022a6:	4690      	mov	r8, r2
 80022a8:	4699      	mov	r9, r3
 80022aa:	4623      	mov	r3, r4
 80022ac:	eb18 0303 	adds.w	r3, r8, r3
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	462b      	mov	r3, r5
 80022b4:	eb49 0303 	adc.w	r3, r9, r3
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	f04f 0300 	mov.w	r3, #0
 80022c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022c6:	4629      	mov	r1, r5
 80022c8:	024b      	lsls	r3, r1, #9
 80022ca:	4621      	mov	r1, r4
 80022cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022d0:	4621      	mov	r1, r4
 80022d2:	024a      	lsls	r2, r1, #9
 80022d4:	4610      	mov	r0, r2
 80022d6:	4619      	mov	r1, r3
 80022d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022da:	2200      	movs	r2, #0
 80022dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80022de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022e4:	f7fd ff74 	bl	80001d0 <__aeabi_uldivmod>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	4613      	mov	r3, r2
 80022ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022f0:	e058      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022f2:	4b38      	ldr	r3, [pc, #224]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	099b      	lsrs	r3, r3, #6
 80022f8:	2200      	movs	r2, #0
 80022fa:	4618      	mov	r0, r3
 80022fc:	4611      	mov	r1, r2
 80022fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002302:	623b      	str	r3, [r7, #32]
 8002304:	2300      	movs	r3, #0
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
 8002308:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800230c:	4642      	mov	r2, r8
 800230e:	464b      	mov	r3, r9
 8002310:	f04f 0000 	mov.w	r0, #0
 8002314:	f04f 0100 	mov.w	r1, #0
 8002318:	0159      	lsls	r1, r3, #5
 800231a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800231e:	0150      	lsls	r0, r2, #5
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4641      	mov	r1, r8
 8002326:	ebb2 0a01 	subs.w	sl, r2, r1
 800232a:	4649      	mov	r1, r9
 800232c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	f04f 0300 	mov.w	r3, #0
 8002338:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800233c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002340:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002344:	ebb2 040a 	subs.w	r4, r2, sl
 8002348:	eb63 050b 	sbc.w	r5, r3, fp
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	00eb      	lsls	r3, r5, #3
 8002356:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800235a:	00e2      	lsls	r2, r4, #3
 800235c:	4614      	mov	r4, r2
 800235e:	461d      	mov	r5, r3
 8002360:	4643      	mov	r3, r8
 8002362:	18e3      	adds	r3, r4, r3
 8002364:	603b      	str	r3, [r7, #0]
 8002366:	464b      	mov	r3, r9
 8002368:	eb45 0303 	adc.w	r3, r5, r3
 800236c:	607b      	str	r3, [r7, #4]
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	f04f 0300 	mov.w	r3, #0
 8002376:	e9d7 4500 	ldrd	r4, r5, [r7]
 800237a:	4629      	mov	r1, r5
 800237c:	028b      	lsls	r3, r1, #10
 800237e:	4621      	mov	r1, r4
 8002380:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002384:	4621      	mov	r1, r4
 8002386:	028a      	lsls	r2, r1, #10
 8002388:	4610      	mov	r0, r2
 800238a:	4619      	mov	r1, r3
 800238c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800238e:	2200      	movs	r2, #0
 8002390:	61bb      	str	r3, [r7, #24]
 8002392:	61fa      	str	r2, [r7, #28]
 8002394:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002398:	f7fd ff1a 	bl	80001d0 <__aeabi_uldivmod>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	4613      	mov	r3, r2
 80023a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	0c1b      	lsrs	r3, r3, #16
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	3301      	adds	r3, #1
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80023b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023be:	e002      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80023c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3750      	adds	r7, #80	; 0x50
 80023cc:	46bd      	mov	sp, r7
 80023ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023d2:	bf00      	nop
 80023d4:	40023800 	.word	0x40023800
 80023d8:	00f42400 	.word	0x00f42400
 80023dc:	007a1200 	.word	0x007a1200

080023e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023e4:	4b03      	ldr	r3, [pc, #12]	; (80023f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80023e6:	681b      	ldr	r3, [r3, #0]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	20000004 	.word	0x20000004

080023f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023fc:	f7ff fff0 	bl	80023e0 <HAL_RCC_GetHCLKFreq>
 8002400:	4602      	mov	r2, r0
 8002402:	4b05      	ldr	r3, [pc, #20]	; (8002418 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	0a9b      	lsrs	r3, r3, #10
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	4903      	ldr	r1, [pc, #12]	; (800241c <HAL_RCC_GetPCLK1Freq+0x24>)
 800240e:	5ccb      	ldrb	r3, [r1, r3]
 8002410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002414:	4618      	mov	r0, r3
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40023800 	.word	0x40023800
 800241c:	08005cf0 	.word	0x08005cf0

08002420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002424:	f7ff ffdc 	bl	80023e0 <HAL_RCC_GetHCLKFreq>
 8002428:	4602      	mov	r2, r0
 800242a:	4b05      	ldr	r3, [pc, #20]	; (8002440 <HAL_RCC_GetPCLK2Freq+0x20>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	0b5b      	lsrs	r3, r3, #13
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	4903      	ldr	r1, [pc, #12]	; (8002444 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002436:	5ccb      	ldrb	r3, [r1, r3]
 8002438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800243c:	4618      	mov	r0, r3
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40023800 	.word	0x40023800
 8002444:	08005cf0 	.word	0x08005cf0

08002448 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	220f      	movs	r2, #15
 8002456:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002458:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <HAL_RCC_GetClockConfig+0x5c>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 0203 	and.w	r2, r3, #3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002464:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <HAL_RCC_GetClockConfig+0x5c>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <HAL_RCC_GetClockConfig+0x5c>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800247c:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <HAL_RCC_GetClockConfig+0x5c>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	08db      	lsrs	r3, r3, #3
 8002482:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800248a:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <HAL_RCC_GetClockConfig+0x60>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0207 	and.w	r2, r3, #7
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	601a      	str	r2, [r3, #0]
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40023c00 	.word	0x40023c00

080024ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e041      	b.n	8002542 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f839 	bl	800254a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3304      	adds	r3, #4
 80024e8:	4619      	mov	r1, r3
 80024ea:	4610      	mov	r0, r2
 80024ec:	f000 f9d8 	bl	80028a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b01      	cmp	r3, #1
 8002572:	d001      	beq.n	8002578 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e04e      	b.n	8002616 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0201 	orr.w	r2, r2, #1
 800258e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a23      	ldr	r2, [pc, #140]	; (8002624 <HAL_TIM_Base_Start_IT+0xc4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d022      	beq.n	80025e0 <HAL_TIM_Base_Start_IT+0x80>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a2:	d01d      	beq.n	80025e0 <HAL_TIM_Base_Start_IT+0x80>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a1f      	ldr	r2, [pc, #124]	; (8002628 <HAL_TIM_Base_Start_IT+0xc8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d018      	beq.n	80025e0 <HAL_TIM_Base_Start_IT+0x80>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a1e      	ldr	r2, [pc, #120]	; (800262c <HAL_TIM_Base_Start_IT+0xcc>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d013      	beq.n	80025e0 <HAL_TIM_Base_Start_IT+0x80>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a1c      	ldr	r2, [pc, #112]	; (8002630 <HAL_TIM_Base_Start_IT+0xd0>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d00e      	beq.n	80025e0 <HAL_TIM_Base_Start_IT+0x80>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a1b      	ldr	r2, [pc, #108]	; (8002634 <HAL_TIM_Base_Start_IT+0xd4>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d009      	beq.n	80025e0 <HAL_TIM_Base_Start_IT+0x80>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a19      	ldr	r2, [pc, #100]	; (8002638 <HAL_TIM_Base_Start_IT+0xd8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d004      	beq.n	80025e0 <HAL_TIM_Base_Start_IT+0x80>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a18      	ldr	r2, [pc, #96]	; (800263c <HAL_TIM_Base_Start_IT+0xdc>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d111      	bne.n	8002604 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2b06      	cmp	r3, #6
 80025f0:	d010      	beq.n	8002614 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f042 0201 	orr.w	r2, r2, #1
 8002600:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002602:	e007      	b.n	8002614 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0201 	orr.w	r2, r2, #1
 8002612:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40010000 	.word	0x40010000
 8002628:	40000400 	.word	0x40000400
 800262c:	40000800 	.word	0x40000800
 8002630:	40000c00 	.word	0x40000c00
 8002634:	40010400 	.word	0x40010400
 8002638:	40014000 	.word	0x40014000
 800263c:	40001800 	.word	0x40001800

08002640 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b02      	cmp	r3, #2
 8002654:	d122      	bne.n	800269c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b02      	cmp	r3, #2
 8002662:	d11b      	bne.n	800269c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f06f 0202 	mvn.w	r2, #2
 800266c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f8ee 	bl	8002864 <HAL_TIM_IC_CaptureCallback>
 8002688:	e005      	b.n	8002696 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f8e0 	bl	8002850 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 f8f1 	bl	8002878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d122      	bne.n	80026f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d11b      	bne.n	80026f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f06f 0204 	mvn.w	r2, #4
 80026c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2202      	movs	r2, #2
 80026c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f8c4 	bl	8002864 <HAL_TIM_IC_CaptureCallback>
 80026dc:	e005      	b.n	80026ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f8b6 	bl	8002850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f8c7 	bl	8002878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d122      	bne.n	8002744 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f003 0308 	and.w	r3, r3, #8
 8002708:	2b08      	cmp	r3, #8
 800270a:	d11b      	bne.n	8002744 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f06f 0208 	mvn.w	r2, #8
 8002714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2204      	movs	r2, #4
 800271a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f89a 	bl	8002864 <HAL_TIM_IC_CaptureCallback>
 8002730:	e005      	b.n	800273e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f88c 	bl	8002850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 f89d 	bl	8002878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	f003 0310 	and.w	r3, r3, #16
 800274e:	2b10      	cmp	r3, #16
 8002750:	d122      	bne.n	8002798 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	2b10      	cmp	r3, #16
 800275e:	d11b      	bne.n	8002798 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f06f 0210 	mvn.w	r2, #16
 8002768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2208      	movs	r2, #8
 800276e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f870 	bl	8002864 <HAL_TIM_IC_CaptureCallback>
 8002784:	e005      	b.n	8002792 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f862 	bl	8002850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f873 	bl	8002878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d10e      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d107      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f06f 0201 	mvn.w	r2, #1
 80027bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7fe f950 	bl	8000a64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ce:	2b80      	cmp	r3, #128	; 0x80
 80027d0:	d10e      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027dc:	2b80      	cmp	r3, #128	; 0x80
 80027de:	d107      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f902 	bl	80029f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fa:	2b40      	cmp	r3, #64	; 0x40
 80027fc:	d10e      	bne.n	800281c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002808:	2b40      	cmp	r3, #64	; 0x40
 800280a:	d107      	bne.n	800281c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f838 	bl	800288c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f003 0320 	and.w	r3, r3, #32
 8002826:	2b20      	cmp	r3, #32
 8002828:	d10e      	bne.n	8002848 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f003 0320 	and.w	r3, r3, #32
 8002834:	2b20      	cmp	r3, #32
 8002836:	d107      	bne.n	8002848 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f06f 0220 	mvn.w	r2, #32
 8002840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f8cc 	bl	80029e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002848:	bf00      	nop
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a40      	ldr	r2, [pc, #256]	; (80029b4 <TIM_Base_SetConfig+0x114>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d013      	beq.n	80028e0 <TIM_Base_SetConfig+0x40>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028be:	d00f      	beq.n	80028e0 <TIM_Base_SetConfig+0x40>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a3d      	ldr	r2, [pc, #244]	; (80029b8 <TIM_Base_SetConfig+0x118>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d00b      	beq.n	80028e0 <TIM_Base_SetConfig+0x40>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a3c      	ldr	r2, [pc, #240]	; (80029bc <TIM_Base_SetConfig+0x11c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d007      	beq.n	80028e0 <TIM_Base_SetConfig+0x40>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a3b      	ldr	r2, [pc, #236]	; (80029c0 <TIM_Base_SetConfig+0x120>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d003      	beq.n	80028e0 <TIM_Base_SetConfig+0x40>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a3a      	ldr	r2, [pc, #232]	; (80029c4 <TIM_Base_SetConfig+0x124>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d108      	bne.n	80028f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a2f      	ldr	r2, [pc, #188]	; (80029b4 <TIM_Base_SetConfig+0x114>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d02b      	beq.n	8002952 <TIM_Base_SetConfig+0xb2>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002900:	d027      	beq.n	8002952 <TIM_Base_SetConfig+0xb2>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a2c      	ldr	r2, [pc, #176]	; (80029b8 <TIM_Base_SetConfig+0x118>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d023      	beq.n	8002952 <TIM_Base_SetConfig+0xb2>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a2b      	ldr	r2, [pc, #172]	; (80029bc <TIM_Base_SetConfig+0x11c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d01f      	beq.n	8002952 <TIM_Base_SetConfig+0xb2>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a2a      	ldr	r2, [pc, #168]	; (80029c0 <TIM_Base_SetConfig+0x120>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d01b      	beq.n	8002952 <TIM_Base_SetConfig+0xb2>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a29      	ldr	r2, [pc, #164]	; (80029c4 <TIM_Base_SetConfig+0x124>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d017      	beq.n	8002952 <TIM_Base_SetConfig+0xb2>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a28      	ldr	r2, [pc, #160]	; (80029c8 <TIM_Base_SetConfig+0x128>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d013      	beq.n	8002952 <TIM_Base_SetConfig+0xb2>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a27      	ldr	r2, [pc, #156]	; (80029cc <TIM_Base_SetConfig+0x12c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d00f      	beq.n	8002952 <TIM_Base_SetConfig+0xb2>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a26      	ldr	r2, [pc, #152]	; (80029d0 <TIM_Base_SetConfig+0x130>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00b      	beq.n	8002952 <TIM_Base_SetConfig+0xb2>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a25      	ldr	r2, [pc, #148]	; (80029d4 <TIM_Base_SetConfig+0x134>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d007      	beq.n	8002952 <TIM_Base_SetConfig+0xb2>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a24      	ldr	r2, [pc, #144]	; (80029d8 <TIM_Base_SetConfig+0x138>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d003      	beq.n	8002952 <TIM_Base_SetConfig+0xb2>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a23      	ldr	r2, [pc, #140]	; (80029dc <TIM_Base_SetConfig+0x13c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d108      	bne.n	8002964 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	4313      	orrs	r3, r2
 8002962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	4313      	orrs	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a0a      	ldr	r2, [pc, #40]	; (80029b4 <TIM_Base_SetConfig+0x114>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d003      	beq.n	8002998 <TIM_Base_SetConfig+0xf8>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a0c      	ldr	r2, [pc, #48]	; (80029c4 <TIM_Base_SetConfig+0x124>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d103      	bne.n	80029a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	615a      	str	r2, [r3, #20]
}
 80029a6:	bf00      	nop
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40010000 	.word	0x40010000
 80029b8:	40000400 	.word	0x40000400
 80029bc:	40000800 	.word	0x40000800
 80029c0:	40000c00 	.word	0x40000c00
 80029c4:	40010400 	.word	0x40010400
 80029c8:	40014000 	.word	0x40014000
 80029cc:	40014400 	.word	0x40014400
 80029d0:	40014800 	.word	0x40014800
 80029d4:	40001800 	.word	0x40001800
 80029d8:	40001c00 	.word	0x40001c00
 80029dc:	40002000 	.word	0x40002000

080029e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e03f      	b.n	8002a9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fe f858 	bl	8000ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2224      	movs	r2, #36	; 0x24
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 fce9 	bl	8003424 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695a      	ldr	r2, [r3, #20]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2220      	movs	r2, #32
 8002a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	60f8      	str	r0, [r7, #12]
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	4613      	mov	r3, r2
 8002aae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b20      	cmp	r3, #32
 8002aba:	d11d      	bne.n	8002af8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <HAL_UART_Receive_IT+0x26>
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e016      	b.n	8002afa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <HAL_UART_Receive_IT+0x38>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e00f      	b.n	8002afa <HAL_UART_Receive_IT+0x58>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002ae8:	88fb      	ldrh	r3, [r7, #6]
 8002aea:	461a      	mov	r2, r3
 8002aec:	68b9      	ldr	r1, [r7, #8]
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 fac0 	bl	8003074 <UART_Start_Receive_IT>
 8002af4:	4603      	mov	r3, r0
 8002af6:	e000      	b.n	8002afa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002af8:	2302      	movs	r3, #2
  }
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b0ba      	sub	sp, #232	; 0xe8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002b42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10f      	bne.n	8002b6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b4e:	f003 0320 	and.w	r3, r3, #32
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d009      	beq.n	8002b6a <HAL_UART_IRQHandler+0x66>
 8002b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b5a:	f003 0320 	and.w	r3, r3, #32
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 fba3 	bl	80032ae <UART_Receive_IT>
      return;
 8002b68:	e256      	b.n	8003018 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 80de 	beq.w	8002d30 <HAL_UART_IRQHandler+0x22c>
 8002b74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d106      	bne.n	8002b8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 80d1 	beq.w	8002d30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00b      	beq.n	8002bb2 <HAL_UART_IRQHandler+0xae>
 8002b9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d005      	beq.n	8002bb2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f043 0201 	orr.w	r2, r3, #1
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00b      	beq.n	8002bd6 <HAL_UART_IRQHandler+0xd2>
 8002bbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d005      	beq.n	8002bd6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	f043 0202 	orr.w	r2, r3, #2
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00b      	beq.n	8002bfa <HAL_UART_IRQHandler+0xf6>
 8002be2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d005      	beq.n	8002bfa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f043 0204 	orr.w	r2, r3, #4
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d011      	beq.n	8002c2a <HAL_UART_IRQHandler+0x126>
 8002c06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c0a:	f003 0320 	and.w	r3, r3, #32
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d105      	bne.n	8002c1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f043 0208 	orr.w	r2, r3, #8
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f000 81ed 	beq.w	800300e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c38:	f003 0320 	and.w	r3, r3, #32
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d008      	beq.n	8002c52 <HAL_UART_IRQHandler+0x14e>
 8002c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c44:	f003 0320 	and.w	r3, r3, #32
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 fb2e 	bl	80032ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5c:	2b40      	cmp	r3, #64	; 0x40
 8002c5e:	bf0c      	ite	eq
 8002c60:	2301      	moveq	r3, #1
 8002c62:	2300      	movne	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d103      	bne.n	8002c7e <HAL_UART_IRQHandler+0x17a>
 8002c76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d04f      	beq.n	8002d1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 fa36 	bl	80030f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8e:	2b40      	cmp	r3, #64	; 0x40
 8002c90:	d141      	bne.n	8002d16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	3314      	adds	r3, #20
 8002c98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ca0:	e853 3f00 	ldrex	r3, [r3]
 8002ca4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ca8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	3314      	adds	r3, #20
 8002cba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002cbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002cc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002cca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002cce:	e841 2300 	strex	r3, r2, [r1]
 8002cd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002cd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1d9      	bne.n	8002c92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d013      	beq.n	8002d0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cea:	4a7d      	ldr	r2, [pc, #500]	; (8002ee0 <HAL_UART_IRQHandler+0x3dc>)
 8002cec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe fae2 	bl	80012bc <HAL_DMA_Abort_IT>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d016      	beq.n	8002d2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d08:	4610      	mov	r0, r2
 8002d0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d0c:	e00e      	b.n	8002d2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f99a 	bl	8003048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d14:	e00a      	b.n	8002d2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f996 	bl	8003048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d1c:	e006      	b.n	8002d2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f992 	bl	8003048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002d2a:	e170      	b.n	800300e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d2c:	bf00      	nop
    return;
 8002d2e:	e16e      	b.n	800300e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	f040 814a 	bne.w	8002fce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d3e:	f003 0310 	and.w	r3, r3, #16
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 8143 	beq.w	8002fce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d4c:	f003 0310 	and.w	r3, r3, #16
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 813c 	beq.w	8002fce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d56:	2300      	movs	r3, #0
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	60bb      	str	r3, [r7, #8]
 8002d6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d76:	2b40      	cmp	r3, #64	; 0x40
 8002d78:	f040 80b4 	bne.w	8002ee4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 8140 	beq.w	8003012 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	f080 8139 	bcs.w	8003012 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002da6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002db2:	f000 8088 	beq.w	8002ec6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	330c      	adds	r3, #12
 8002dbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dc4:	e853 3f00 	ldrex	r3, [r3]
 8002dc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002dcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	330c      	adds	r3, #12
 8002dde:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002de2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002de6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002dee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002df2:	e841 2300 	strex	r3, r2, [r1]
 8002df6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002dfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1d9      	bne.n	8002db6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	3314      	adds	r3, #20
 8002e08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e0c:	e853 3f00 	ldrex	r3, [r3]
 8002e10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002e12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e14:	f023 0301 	bic.w	r3, r3, #1
 8002e18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	3314      	adds	r3, #20
 8002e22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e32:	e841 2300 	strex	r3, r2, [r1]
 8002e36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1e1      	bne.n	8002e02 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	3314      	adds	r3, #20
 8002e44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e48:	e853 3f00 	ldrex	r3, [r3]
 8002e4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	3314      	adds	r3, #20
 8002e5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e6a:	e841 2300 	strex	r3, r2, [r1]
 8002e6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1e3      	bne.n	8002e3e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	330c      	adds	r3, #12
 8002e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e8e:	e853 3f00 	ldrex	r3, [r3]
 8002e92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e96:	f023 0310 	bic.w	r3, r3, #16
 8002e9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	330c      	adds	r3, #12
 8002ea4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002ea8:	65ba      	str	r2, [r7, #88]	; 0x58
 8002eaa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002eae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002eb0:	e841 2300 	strex	r3, r2, [r1]
 8002eb4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1e3      	bne.n	8002e84 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fe f98b 	bl	80011dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f8c0 	bl	800305c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002edc:	e099      	b.n	8003012 <HAL_UART_IRQHandler+0x50e>
 8002ede:	bf00      	nop
 8002ee0:	080031b7 	.word	0x080031b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 808b 	beq.w	8003016 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002f00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 8086 	beq.w	8003016 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	330c      	adds	r3, #12
 8002f10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f14:	e853 3f00 	ldrex	r3, [r3]
 8002f18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	330c      	adds	r3, #12
 8002f2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002f2e:	647a      	str	r2, [r7, #68]	; 0x44
 8002f30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f36:	e841 2300 	strex	r3, r2, [r1]
 8002f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1e3      	bne.n	8002f0a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3314      	adds	r3, #20
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	e853 3f00 	ldrex	r3, [r3]
 8002f50:	623b      	str	r3, [r7, #32]
   return(result);
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	f023 0301 	bic.w	r3, r3, #1
 8002f58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	3314      	adds	r3, #20
 8002f62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f66:	633a      	str	r2, [r7, #48]	; 0x30
 8002f68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f6e:	e841 2300 	strex	r3, r2, [r1]
 8002f72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1e3      	bne.n	8002f42 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	330c      	adds	r3, #12
 8002f8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	e853 3f00 	ldrex	r3, [r3]
 8002f96:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f023 0310 	bic.w	r3, r3, #16
 8002f9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	330c      	adds	r3, #12
 8002fa8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002fac:	61fa      	str	r2, [r7, #28]
 8002fae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb0:	69b9      	ldr	r1, [r7, #24]
 8002fb2:	69fa      	ldr	r2, [r7, #28]
 8002fb4:	e841 2300 	strex	r3, r2, [r1]
 8002fb8:	617b      	str	r3, [r7, #20]
   return(result);
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1e3      	bne.n	8002f88 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f848 	bl	800305c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002fcc:	e023      	b.n	8003016 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <HAL_UART_IRQHandler+0x4ea>
 8002fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f8f9 	bl	80031de <UART_Transmit_IT>
    return;
 8002fec:	e014      	b.n	8003018 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00e      	beq.n	8003018 <HAL_UART_IRQHandler+0x514>
 8002ffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003002:	2b00      	cmp	r3, #0
 8003004:	d008      	beq.n	8003018 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f939 	bl	800327e <UART_EndTransmit_IT>
    return;
 800300c:	e004      	b.n	8003018 <HAL_UART_IRQHandler+0x514>
    return;
 800300e:	bf00      	nop
 8003010:	e002      	b.n	8003018 <HAL_UART_IRQHandler+0x514>
      return;
 8003012:	bf00      	nop
 8003014:	e000      	b.n	8003018 <HAL_UART_IRQHandler+0x514>
      return;
 8003016:	bf00      	nop
  }
}
 8003018:	37e8      	adds	r7, #232	; 0xe8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop

08003020 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	4613      	mov	r3, r2
 8003080:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	88fa      	ldrh	r2, [r7, #6]
 800308c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	88fa      	ldrh	r2, [r7, #6]
 8003092:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2222      	movs	r2, #34	; 0x22
 800309e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d007      	beq.n	80030c2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030c0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695a      	ldr	r2, [r3, #20]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f042 0201 	orr.w	r2, r2, #1
 80030d0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f042 0220 	orr.w	r2, r2, #32
 80030e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b095      	sub	sp, #84	; 0x54
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	330c      	adds	r3, #12
 80030fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003102:	e853 3f00 	ldrex	r3, [r3]
 8003106:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800310e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	330c      	adds	r3, #12
 8003116:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003118:	643a      	str	r2, [r7, #64]	; 0x40
 800311a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800311c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800311e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003120:	e841 2300 	strex	r3, r2, [r1]
 8003124:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1e5      	bne.n	80030f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	3314      	adds	r3, #20
 8003132:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	e853 3f00 	ldrex	r3, [r3]
 800313a:	61fb      	str	r3, [r7, #28]
   return(result);
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	f023 0301 	bic.w	r3, r3, #1
 8003142:	64bb      	str	r3, [r7, #72]	; 0x48
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	3314      	adds	r3, #20
 800314a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800314c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800314e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003150:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003152:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003154:	e841 2300 	strex	r3, r2, [r1]
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1e5      	bne.n	800312c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003164:	2b01      	cmp	r3, #1
 8003166:	d119      	bne.n	800319c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	330c      	adds	r3, #12
 800316e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	e853 3f00 	ldrex	r3, [r3]
 8003176:	60bb      	str	r3, [r7, #8]
   return(result);
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	f023 0310 	bic.w	r3, r3, #16
 800317e:	647b      	str	r3, [r7, #68]	; 0x44
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	330c      	adds	r3, #12
 8003186:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003188:	61ba      	str	r2, [r7, #24]
 800318a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318c:	6979      	ldr	r1, [r7, #20]
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	e841 2300 	strex	r3, r2, [r1]
 8003194:	613b      	str	r3, [r7, #16]
   return(result);
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1e5      	bne.n	8003168 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2220      	movs	r2, #32
 80031a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80031aa:	bf00      	nop
 80031ac:	3754      	adds	r7, #84	; 0x54
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f7ff ff39 	bl	8003048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031d6:	bf00      	nop
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031de:	b480      	push	{r7}
 80031e0:	b085      	sub	sp, #20
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b21      	cmp	r3, #33	; 0x21
 80031f0:	d13e      	bne.n	8003270 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031fa:	d114      	bne.n	8003226 <UART_Transmit_IT+0x48>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d110      	bne.n	8003226 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	461a      	mov	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003218:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	1c9a      	adds	r2, r3, #2
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	621a      	str	r2, [r3, #32]
 8003224:	e008      	b.n	8003238 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	1c59      	adds	r1, r3, #1
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6211      	str	r1, [r2, #32]
 8003230:	781a      	ldrb	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800323c:	b29b      	uxth	r3, r3
 800323e:	3b01      	subs	r3, #1
 8003240:	b29b      	uxth	r3, r3
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	4619      	mov	r1, r3
 8003246:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10f      	bne.n	800326c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800325a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800326a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	e000      	b.n	8003272 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003270:	2302      	movs	r3, #2
  }
}
 8003272:	4618      	mov	r0, r3
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68da      	ldr	r2, [r3, #12]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003294:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2220      	movs	r2, #32
 800329a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7ff febe 	bl	8003020 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b08c      	sub	sp, #48	; 0x30
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b22      	cmp	r3, #34	; 0x22
 80032c0:	f040 80ab 	bne.w	800341a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032cc:	d117      	bne.n	80032fe <UART_Receive_IT+0x50>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d113      	bne.n	80032fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	1c9a      	adds	r2, r3, #2
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	629a      	str	r2, [r3, #40]	; 0x28
 80032fc:	e026      	b.n	800334c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003302:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003304:	2300      	movs	r3, #0
 8003306:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003310:	d007      	beq.n	8003322 <UART_Receive_IT+0x74>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10a      	bne.n	8003330 <UART_Receive_IT+0x82>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d106      	bne.n	8003330 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	b2da      	uxtb	r2, r3
 800332a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332c:	701a      	strb	r2, [r3, #0]
 800332e:	e008      	b.n	8003342 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	b2db      	uxtb	r3, r3
 8003338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800333c:	b2da      	uxtb	r2, r3
 800333e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003340:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003350:	b29b      	uxth	r3, r3
 8003352:	3b01      	subs	r3, #1
 8003354:	b29b      	uxth	r3, r3
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	4619      	mov	r1, r3
 800335a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800335c:	2b00      	cmp	r3, #0
 800335e:	d15a      	bne.n	8003416 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0220 	bic.w	r2, r2, #32
 800336e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800337e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695a      	ldr	r2, [r3, #20]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0201 	bic.w	r2, r2, #1
 800338e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339c:	2b01      	cmp	r3, #1
 800339e:	d135      	bne.n	800340c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	330c      	adds	r3, #12
 80033ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	e853 3f00 	ldrex	r3, [r3]
 80033b4:	613b      	str	r3, [r7, #16]
   return(result);
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f023 0310 	bic.w	r3, r3, #16
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	330c      	adds	r3, #12
 80033c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c6:	623a      	str	r2, [r7, #32]
 80033c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ca:	69f9      	ldr	r1, [r7, #28]
 80033cc:	6a3a      	ldr	r2, [r7, #32]
 80033ce:	e841 2300 	strex	r3, r2, [r1]
 80033d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1e5      	bne.n	80033a6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b10      	cmp	r3, #16
 80033e6:	d10a      	bne.n	80033fe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033e8:	2300      	movs	r3, #0
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003402:	4619      	mov	r1, r3
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7ff fe29 	bl	800305c <HAL_UARTEx_RxEventCallback>
 800340a:	e002      	b.n	8003412 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f7ff fe11 	bl	8003034 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003412:	2300      	movs	r3, #0
 8003414:	e002      	b.n	800341c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003416:	2300      	movs	r3, #0
 8003418:	e000      	b.n	800341c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800341a:	2302      	movs	r3, #2
  }
}
 800341c:	4618      	mov	r0, r3
 800341e:	3730      	adds	r7, #48	; 0x30
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003428:	b0c0      	sub	sp, #256	; 0x100
 800342a:	af00      	add	r7, sp, #0
 800342c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800343c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003440:	68d9      	ldr	r1, [r3, #12]
 8003442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	ea40 0301 	orr.w	r3, r0, r1
 800344c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800344e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	431a      	orrs	r2, r3
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	431a      	orrs	r2, r3
 8003464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800347c:	f021 010c 	bic.w	r1, r1, #12
 8003480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800348a:	430b      	orrs	r3, r1
 800348c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800348e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800349a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349e:	6999      	ldr	r1, [r3, #24]
 80034a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	ea40 0301 	orr.w	r3, r0, r1
 80034aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	4b8f      	ldr	r3, [pc, #572]	; (80036f0 <UART_SetConfig+0x2cc>)
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d005      	beq.n	80034c4 <UART_SetConfig+0xa0>
 80034b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	4b8d      	ldr	r3, [pc, #564]	; (80036f4 <UART_SetConfig+0x2d0>)
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d104      	bne.n	80034ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034c4:	f7fe ffac 	bl	8002420 <HAL_RCC_GetPCLK2Freq>
 80034c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80034cc:	e003      	b.n	80034d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034ce:	f7fe ff93 	bl	80023f8 <HAL_RCC_GetPCLK1Freq>
 80034d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034e0:	f040 810c 	bne.w	80036fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034e8:	2200      	movs	r2, #0
 80034ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80034f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80034f6:	4622      	mov	r2, r4
 80034f8:	462b      	mov	r3, r5
 80034fa:	1891      	adds	r1, r2, r2
 80034fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80034fe:	415b      	adcs	r3, r3
 8003500:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003502:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003506:	4621      	mov	r1, r4
 8003508:	eb12 0801 	adds.w	r8, r2, r1
 800350c:	4629      	mov	r1, r5
 800350e:	eb43 0901 	adc.w	r9, r3, r1
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800351e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003522:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003526:	4690      	mov	r8, r2
 8003528:	4699      	mov	r9, r3
 800352a:	4623      	mov	r3, r4
 800352c:	eb18 0303 	adds.w	r3, r8, r3
 8003530:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003534:	462b      	mov	r3, r5
 8003536:	eb49 0303 	adc.w	r3, r9, r3
 800353a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800353e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800354a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800354e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003552:	460b      	mov	r3, r1
 8003554:	18db      	adds	r3, r3, r3
 8003556:	653b      	str	r3, [r7, #80]	; 0x50
 8003558:	4613      	mov	r3, r2
 800355a:	eb42 0303 	adc.w	r3, r2, r3
 800355e:	657b      	str	r3, [r7, #84]	; 0x54
 8003560:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003564:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003568:	f7fc fe32 	bl	80001d0 <__aeabi_uldivmod>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	4b61      	ldr	r3, [pc, #388]	; (80036f8 <UART_SetConfig+0x2d4>)
 8003572:	fba3 2302 	umull	r2, r3, r3, r2
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	011c      	lsls	r4, r3, #4
 800357a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800357e:	2200      	movs	r2, #0
 8003580:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003584:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003588:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800358c:	4642      	mov	r2, r8
 800358e:	464b      	mov	r3, r9
 8003590:	1891      	adds	r1, r2, r2
 8003592:	64b9      	str	r1, [r7, #72]	; 0x48
 8003594:	415b      	adcs	r3, r3
 8003596:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003598:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800359c:	4641      	mov	r1, r8
 800359e:	eb12 0a01 	adds.w	sl, r2, r1
 80035a2:	4649      	mov	r1, r9
 80035a4:	eb43 0b01 	adc.w	fp, r3, r1
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035bc:	4692      	mov	sl, r2
 80035be:	469b      	mov	fp, r3
 80035c0:	4643      	mov	r3, r8
 80035c2:	eb1a 0303 	adds.w	r3, sl, r3
 80035c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035ca:	464b      	mov	r3, r9
 80035cc:	eb4b 0303 	adc.w	r3, fp, r3
 80035d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80035e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035e8:	460b      	mov	r3, r1
 80035ea:	18db      	adds	r3, r3, r3
 80035ec:	643b      	str	r3, [r7, #64]	; 0x40
 80035ee:	4613      	mov	r3, r2
 80035f0:	eb42 0303 	adc.w	r3, r2, r3
 80035f4:	647b      	str	r3, [r7, #68]	; 0x44
 80035f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80035fe:	f7fc fde7 	bl	80001d0 <__aeabi_uldivmod>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4611      	mov	r1, r2
 8003608:	4b3b      	ldr	r3, [pc, #236]	; (80036f8 <UART_SetConfig+0x2d4>)
 800360a:	fba3 2301 	umull	r2, r3, r3, r1
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	2264      	movs	r2, #100	; 0x64
 8003612:	fb02 f303 	mul.w	r3, r2, r3
 8003616:	1acb      	subs	r3, r1, r3
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800361e:	4b36      	ldr	r3, [pc, #216]	; (80036f8 <UART_SetConfig+0x2d4>)
 8003620:	fba3 2302 	umull	r2, r3, r3, r2
 8003624:	095b      	lsrs	r3, r3, #5
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800362c:	441c      	add	r4, r3
 800362e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003632:	2200      	movs	r2, #0
 8003634:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003638:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800363c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003640:	4642      	mov	r2, r8
 8003642:	464b      	mov	r3, r9
 8003644:	1891      	adds	r1, r2, r2
 8003646:	63b9      	str	r1, [r7, #56]	; 0x38
 8003648:	415b      	adcs	r3, r3
 800364a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800364c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003650:	4641      	mov	r1, r8
 8003652:	1851      	adds	r1, r2, r1
 8003654:	6339      	str	r1, [r7, #48]	; 0x30
 8003656:	4649      	mov	r1, r9
 8003658:	414b      	adcs	r3, r1
 800365a:	637b      	str	r3, [r7, #52]	; 0x34
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	f04f 0300 	mov.w	r3, #0
 8003664:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003668:	4659      	mov	r1, fp
 800366a:	00cb      	lsls	r3, r1, #3
 800366c:	4651      	mov	r1, sl
 800366e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003672:	4651      	mov	r1, sl
 8003674:	00ca      	lsls	r2, r1, #3
 8003676:	4610      	mov	r0, r2
 8003678:	4619      	mov	r1, r3
 800367a:	4603      	mov	r3, r0
 800367c:	4642      	mov	r2, r8
 800367e:	189b      	adds	r3, r3, r2
 8003680:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003684:	464b      	mov	r3, r9
 8003686:	460a      	mov	r2, r1
 8003688:	eb42 0303 	adc.w	r3, r2, r3
 800368c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800369c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80036a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80036a4:	460b      	mov	r3, r1
 80036a6:	18db      	adds	r3, r3, r3
 80036a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036aa:	4613      	mov	r3, r2
 80036ac:	eb42 0303 	adc.w	r3, r2, r3
 80036b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80036ba:	f7fc fd89 	bl	80001d0 <__aeabi_uldivmod>
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	4b0d      	ldr	r3, [pc, #52]	; (80036f8 <UART_SetConfig+0x2d4>)
 80036c4:	fba3 1302 	umull	r1, r3, r3, r2
 80036c8:	095b      	lsrs	r3, r3, #5
 80036ca:	2164      	movs	r1, #100	; 0x64
 80036cc:	fb01 f303 	mul.w	r3, r1, r3
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	3332      	adds	r3, #50	; 0x32
 80036d6:	4a08      	ldr	r2, [pc, #32]	; (80036f8 <UART_SetConfig+0x2d4>)
 80036d8:	fba2 2303 	umull	r2, r3, r2, r3
 80036dc:	095b      	lsrs	r3, r3, #5
 80036de:	f003 0207 	and.w	r2, r3, #7
 80036e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4422      	add	r2, r4
 80036ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036ec:	e105      	b.n	80038fa <UART_SetConfig+0x4d6>
 80036ee:	bf00      	nop
 80036f0:	40011000 	.word	0x40011000
 80036f4:	40011400 	.word	0x40011400
 80036f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003700:	2200      	movs	r2, #0
 8003702:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003706:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800370a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800370e:	4642      	mov	r2, r8
 8003710:	464b      	mov	r3, r9
 8003712:	1891      	adds	r1, r2, r2
 8003714:	6239      	str	r1, [r7, #32]
 8003716:	415b      	adcs	r3, r3
 8003718:	627b      	str	r3, [r7, #36]	; 0x24
 800371a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800371e:	4641      	mov	r1, r8
 8003720:	1854      	adds	r4, r2, r1
 8003722:	4649      	mov	r1, r9
 8003724:	eb43 0501 	adc.w	r5, r3, r1
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	f04f 0300 	mov.w	r3, #0
 8003730:	00eb      	lsls	r3, r5, #3
 8003732:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003736:	00e2      	lsls	r2, r4, #3
 8003738:	4614      	mov	r4, r2
 800373a:	461d      	mov	r5, r3
 800373c:	4643      	mov	r3, r8
 800373e:	18e3      	adds	r3, r4, r3
 8003740:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003744:	464b      	mov	r3, r9
 8003746:	eb45 0303 	adc.w	r3, r5, r3
 800374a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800374e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800375a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800375e:	f04f 0200 	mov.w	r2, #0
 8003762:	f04f 0300 	mov.w	r3, #0
 8003766:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800376a:	4629      	mov	r1, r5
 800376c:	008b      	lsls	r3, r1, #2
 800376e:	4621      	mov	r1, r4
 8003770:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003774:	4621      	mov	r1, r4
 8003776:	008a      	lsls	r2, r1, #2
 8003778:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800377c:	f7fc fd28 	bl	80001d0 <__aeabi_uldivmod>
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	4b60      	ldr	r3, [pc, #384]	; (8003908 <UART_SetConfig+0x4e4>)
 8003786:	fba3 2302 	umull	r2, r3, r3, r2
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	011c      	lsls	r4, r3, #4
 800378e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003792:	2200      	movs	r2, #0
 8003794:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003798:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800379c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80037a0:	4642      	mov	r2, r8
 80037a2:	464b      	mov	r3, r9
 80037a4:	1891      	adds	r1, r2, r2
 80037a6:	61b9      	str	r1, [r7, #24]
 80037a8:	415b      	adcs	r3, r3
 80037aa:	61fb      	str	r3, [r7, #28]
 80037ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037b0:	4641      	mov	r1, r8
 80037b2:	1851      	adds	r1, r2, r1
 80037b4:	6139      	str	r1, [r7, #16]
 80037b6:	4649      	mov	r1, r9
 80037b8:	414b      	adcs	r3, r1
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037c8:	4659      	mov	r1, fp
 80037ca:	00cb      	lsls	r3, r1, #3
 80037cc:	4651      	mov	r1, sl
 80037ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037d2:	4651      	mov	r1, sl
 80037d4:	00ca      	lsls	r2, r1, #3
 80037d6:	4610      	mov	r0, r2
 80037d8:	4619      	mov	r1, r3
 80037da:	4603      	mov	r3, r0
 80037dc:	4642      	mov	r2, r8
 80037de:	189b      	adds	r3, r3, r2
 80037e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037e4:	464b      	mov	r3, r9
 80037e6:	460a      	mov	r2, r1
 80037e8:	eb42 0303 	adc.w	r3, r2, r3
 80037ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80037fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003808:	4649      	mov	r1, r9
 800380a:	008b      	lsls	r3, r1, #2
 800380c:	4641      	mov	r1, r8
 800380e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003812:	4641      	mov	r1, r8
 8003814:	008a      	lsls	r2, r1, #2
 8003816:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800381a:	f7fc fcd9 	bl	80001d0 <__aeabi_uldivmod>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	4b39      	ldr	r3, [pc, #228]	; (8003908 <UART_SetConfig+0x4e4>)
 8003824:	fba3 1302 	umull	r1, r3, r3, r2
 8003828:	095b      	lsrs	r3, r3, #5
 800382a:	2164      	movs	r1, #100	; 0x64
 800382c:	fb01 f303 	mul.w	r3, r1, r3
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	3332      	adds	r3, #50	; 0x32
 8003836:	4a34      	ldr	r2, [pc, #208]	; (8003908 <UART_SetConfig+0x4e4>)
 8003838:	fba2 2303 	umull	r2, r3, r2, r3
 800383c:	095b      	lsrs	r3, r3, #5
 800383e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003842:	441c      	add	r4, r3
 8003844:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003848:	2200      	movs	r2, #0
 800384a:	673b      	str	r3, [r7, #112]	; 0x70
 800384c:	677a      	str	r2, [r7, #116]	; 0x74
 800384e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003852:	4642      	mov	r2, r8
 8003854:	464b      	mov	r3, r9
 8003856:	1891      	adds	r1, r2, r2
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	415b      	adcs	r3, r3
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003862:	4641      	mov	r1, r8
 8003864:	1851      	adds	r1, r2, r1
 8003866:	6039      	str	r1, [r7, #0]
 8003868:	4649      	mov	r1, r9
 800386a:	414b      	adcs	r3, r1
 800386c:	607b      	str	r3, [r7, #4]
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800387a:	4659      	mov	r1, fp
 800387c:	00cb      	lsls	r3, r1, #3
 800387e:	4651      	mov	r1, sl
 8003880:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003884:	4651      	mov	r1, sl
 8003886:	00ca      	lsls	r2, r1, #3
 8003888:	4610      	mov	r0, r2
 800388a:	4619      	mov	r1, r3
 800388c:	4603      	mov	r3, r0
 800388e:	4642      	mov	r2, r8
 8003890:	189b      	adds	r3, r3, r2
 8003892:	66bb      	str	r3, [r7, #104]	; 0x68
 8003894:	464b      	mov	r3, r9
 8003896:	460a      	mov	r2, r1
 8003898:	eb42 0303 	adc.w	r3, r2, r3
 800389c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800389e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	663b      	str	r3, [r7, #96]	; 0x60
 80038a8:	667a      	str	r2, [r7, #100]	; 0x64
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	f04f 0300 	mov.w	r3, #0
 80038b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80038b6:	4649      	mov	r1, r9
 80038b8:	008b      	lsls	r3, r1, #2
 80038ba:	4641      	mov	r1, r8
 80038bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038c0:	4641      	mov	r1, r8
 80038c2:	008a      	lsls	r2, r1, #2
 80038c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80038c8:	f7fc fc82 	bl	80001d0 <__aeabi_uldivmod>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4b0d      	ldr	r3, [pc, #52]	; (8003908 <UART_SetConfig+0x4e4>)
 80038d2:	fba3 1302 	umull	r1, r3, r3, r2
 80038d6:	095b      	lsrs	r3, r3, #5
 80038d8:	2164      	movs	r1, #100	; 0x64
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	3332      	adds	r3, #50	; 0x32
 80038e4:	4a08      	ldr	r2, [pc, #32]	; (8003908 <UART_SetConfig+0x4e4>)
 80038e6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ea:	095b      	lsrs	r3, r3, #5
 80038ec:	f003 020f 	and.w	r2, r3, #15
 80038f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4422      	add	r2, r4
 80038f8:	609a      	str	r2, [r3, #8]
}
 80038fa:	bf00      	nop
 80038fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003900:	46bd      	mov	sp, r7
 8003902:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003906:	bf00      	nop
 8003908:	51eb851f 	.word	0x51eb851f

0800390c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f103 0208 	add.w	r2, r3, #8
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f04f 32ff 	mov.w	r2, #4294967295
 8003924:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f103 0208 	add.w	r2, r3, #8
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f103 0208 	add.w	r2, r3, #8
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003966:	b480      	push	{r7}
 8003968:	b085      	sub	sp, #20
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397c:	d103      	bne.n	8003986 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	e00c      	b.n	80039a0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3308      	adds	r3, #8
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	e002      	b.n	8003994 <vListInsert+0x2e>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	429a      	cmp	r2, r3
 800399e:	d2f6      	bcs.n	800398e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	1c5a      	adds	r2, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	601a      	str	r2, [r3, #0]
}
 80039cc:	bf00      	nop
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6892      	ldr	r2, [r2, #8]
 80039ee:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6852      	ldr	r2, [r2, #4]
 80039f8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d103      	bne.n	8003a0c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	1e5a      	subs	r2, r3, #1
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8003a36:	2301      	movs	r3, #1
 8003a38:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10a      	bne.n	8003a5a <xQueueGenericReset+0x2e>
        __asm volatile
 8003a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a48:	f383 8811 	msr	BASEPRI, r3
 8003a4c:	f3bf 8f6f 	isb	sy
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	60fb      	str	r3, [r7, #12]
    }
 8003a56:	bf00      	nop
 8003a58:	e7fe      	b.n	8003a58 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d05d      	beq.n	8003b1c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d059      	beq.n	8003b1c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a70:	2100      	movs	r1, #0
 8003a72:	fba3 2302 	umull	r2, r3, r3, r2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d000      	beq.n	8003a7c <xQueueGenericReset+0x50>
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d14c      	bne.n	8003b1c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8003a82:	f001 fe09 	bl	8005698 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8e:	6939      	ldr	r1, [r7, #16]
 8003a90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a92:	fb01 f303 	mul.w	r3, r1, r3
 8003a96:	441a      	add	r2, r3
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	6939      	ldr	r1, [r7, #16]
 8003ab6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ab8:	fb01 f303 	mul.w	r3, r1, r3
 8003abc:	441a      	add	r2, r3
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	22ff      	movs	r2, #255	; 0xff
 8003ac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	22ff      	movs	r2, #255	; 0xff
 8003ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d114      	bne.n	8003b02 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d01a      	beq.n	8003b16 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	3310      	adds	r3, #16
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 ff79 	bl	80049dc <xTaskRemoveFromEventList>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d012      	beq.n	8003b16 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003af0:	4b15      	ldr	r3, [pc, #84]	; (8003b48 <xQueueGenericReset+0x11c>)
 8003af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	e009      	b.n	8003b16 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	3310      	adds	r3, #16
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7ff ff00 	bl	800390c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	3324      	adds	r3, #36	; 0x24
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff fefb 	bl	800390c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8003b16:	f001 fdef 	bl	80056f8 <vPortExitCritical>
 8003b1a:	e001      	b.n	8003b20 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10a      	bne.n	8003b3c <xQueueGenericReset+0x110>
        __asm volatile
 8003b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2a:	f383 8811 	msr	BASEPRI, r3
 8003b2e:	f3bf 8f6f 	isb	sy
 8003b32:	f3bf 8f4f 	dsb	sy
 8003b36:	60bb      	str	r3, [r7, #8]
    }
 8003b38:	bf00      	nop
 8003b3a:	e7fe      	b.n	8003b3a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8003b3c:	697b      	ldr	r3, [r7, #20]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	e000ed04 	.word	0xe000ed04

08003b4c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08a      	sub	sp, #40	; 0x28
 8003b50:	af02      	add	r7, sp, #8
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	4613      	mov	r3, r2
 8003b58:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d02e      	beq.n	8003bc2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003b64:	2100      	movs	r1, #0
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d000      	beq.n	8003b74 <xQueueGenericCreate+0x28>
 8003b72:	2101      	movs	r1, #1
 8003b74:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d123      	bne.n	8003bc2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003b82:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003b86:	d81c      	bhi.n	8003bc2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	fb02 f303 	mul.w	r3, r2, r3
 8003b90:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	3350      	adds	r3, #80	; 0x50
 8003b96:	4618      	mov	r0, r3
 8003b98:	f001 fe60 	bl	800585c <pvPortMalloc>
 8003b9c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d01c      	beq.n	8003bde <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	3350      	adds	r3, #80	; 0x50
 8003bac:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003bae:	79fa      	ldrb	r2, [r7, #7]
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	68b9      	ldr	r1, [r7, #8]
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 f814 	bl	8003be8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003bc0:	e00d      	b.n	8003bde <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10a      	bne.n	8003bde <xQueueGenericCreate+0x92>
        __asm volatile
 8003bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bcc:	f383 8811 	msr	BASEPRI, r3
 8003bd0:	f3bf 8f6f 	isb	sy
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	613b      	str	r3, [r7, #16]
    }
 8003bda:	bf00      	nop
 8003bdc:	e7fe      	b.n	8003bdc <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003bde:	69fb      	ldr	r3, [r7, #28]
    }
 8003be0:	4618      	mov	r0, r3
 8003be2:	3720      	adds	r7, #32
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d103      	bne.n	8003c04 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	e002      	b.n	8003c0a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003c16:	2101      	movs	r1, #1
 8003c18:	69b8      	ldr	r0, [r7, #24]
 8003c1a:	f7ff ff07 	bl	8003a2c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	78fa      	ldrb	r2, [r7, #3]
 8003c22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003c26:	bf00      	nop
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08c      	sub	sp, #48	; 0x30
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10a      	bne.n	8003c60 <xQueueReceive+0x30>
        __asm volatile
 8003c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4e:	f383 8811 	msr	BASEPRI, r3
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	623b      	str	r3, [r7, #32]
    }
 8003c5c:	bf00      	nop
 8003c5e:	e7fe      	b.n	8003c5e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d103      	bne.n	8003c6e <xQueueReceive+0x3e>
 8003c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <xQueueReceive+0x42>
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e000      	b.n	8003c74 <xQueueReceive+0x44>
 8003c72:	2300      	movs	r3, #0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10a      	bne.n	8003c8e <xQueueReceive+0x5e>
        __asm volatile
 8003c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7c:	f383 8811 	msr	BASEPRI, r3
 8003c80:	f3bf 8f6f 	isb	sy
 8003c84:	f3bf 8f4f 	dsb	sy
 8003c88:	61fb      	str	r3, [r7, #28]
    }
 8003c8a:	bf00      	nop
 8003c8c:	e7fe      	b.n	8003c8c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c8e:	f001 f8b5 	bl	8004dfc <xTaskGetSchedulerState>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d102      	bne.n	8003c9e <xQueueReceive+0x6e>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <xQueueReceive+0x72>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <xQueueReceive+0x74>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10a      	bne.n	8003cbe <xQueueReceive+0x8e>
        __asm volatile
 8003ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cac:	f383 8811 	msr	BASEPRI, r3
 8003cb0:	f3bf 8f6f 	isb	sy
 8003cb4:	f3bf 8f4f 	dsb	sy
 8003cb8:	61bb      	str	r3, [r7, #24]
    }
 8003cba:	bf00      	nop
 8003cbc:	e7fe      	b.n	8003cbc <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003cbe:	f001 fceb 	bl	8005698 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d01f      	beq.n	8003d0e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003cce:	68b9      	ldr	r1, [r7, #8]
 8003cd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cd2:	f000 f88d 	bl	8003df0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	1e5a      	subs	r2, r3, #1
 8003cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cdc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00f      	beq.n	8003d06 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce8:	3310      	adds	r3, #16
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fe76 	bl	80049dc <xTaskRemoveFromEventList>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d007      	beq.n	8003d06 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003cf6:	4b3d      	ldr	r3, [pc, #244]	; (8003dec <xQueueReceive+0x1bc>)
 8003cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	f3bf 8f4f 	dsb	sy
 8003d02:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003d06:	f001 fcf7 	bl	80056f8 <vPortExitCritical>
                return pdPASS;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e069      	b.n	8003de2 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d103      	bne.n	8003d1c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003d14:	f001 fcf0 	bl	80056f8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	e062      	b.n	8003de2 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d106      	bne.n	8003d30 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003d22:	f107 0310 	add.w	r3, r7, #16
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 ff2e 	bl	8004b88 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003d30:	f001 fce2 	bl	80056f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003d34:	f000 fb5c 	bl	80043f0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003d38:	f001 fcae 	bl	8005698 <vPortEnterCritical>
 8003d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d42:	b25b      	sxtb	r3, r3
 8003d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d48:	d103      	bne.n	8003d52 <xQueueReceive+0x122>
 8003d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d58:	b25b      	sxtb	r3, r3
 8003d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5e:	d103      	bne.n	8003d68 <xQueueReceive+0x138>
 8003d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d68:	f001 fcc6 	bl	80056f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d6c:	1d3a      	adds	r2, r7, #4
 8003d6e:	f107 0310 	add.w	r3, r7, #16
 8003d72:	4611      	mov	r1, r2
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 ff1d 	bl	8004bb4 <xTaskCheckForTimeOut>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d123      	bne.n	8003dc8 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d82:	f000 f8ad 	bl	8003ee0 <prvIsQueueEmpty>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d017      	beq.n	8003dbc <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8e:	3324      	adds	r3, #36	; 0x24
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	4611      	mov	r1, r2
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 fdb7 	bl	8004908 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003d9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d9c:	f000 f84e 	bl	8003e3c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003da0:	f000 fb34 	bl	800440c <xTaskResumeAll>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d189      	bne.n	8003cbe <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003daa:	4b10      	ldr	r3, [pc, #64]	; (8003dec <xQueueReceive+0x1bc>)
 8003dac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	f3bf 8f4f 	dsb	sy
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	e780      	b.n	8003cbe <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003dbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dbe:	f000 f83d 	bl	8003e3c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003dc2:	f000 fb23 	bl	800440c <xTaskResumeAll>
 8003dc6:	e77a      	b.n	8003cbe <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003dc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dca:	f000 f837 	bl	8003e3c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003dce:	f000 fb1d 	bl	800440c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dd4:	f000 f884 	bl	8003ee0 <prvIsQueueEmpty>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f43f af6f 	beq.w	8003cbe <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003de0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3730      	adds	r7, #48	; 0x30
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	e000ed04 	.word	0xe000ed04

08003df0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d018      	beq.n	8003e34 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	441a      	add	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d303      	bcc.n	8003e24 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68d9      	ldr	r1, [r3, #12]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	6838      	ldr	r0, [r7, #0]
 8003e30:	f001 ff04 	bl	8005c3c <memcpy>
    }
}
 8003e34:	bf00      	nop
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003e44:	f001 fc28 	bl	8005698 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e4e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e50:	e011      	b.n	8003e76 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d012      	beq.n	8003e80 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3324      	adds	r3, #36	; 0x24
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fdbc 	bl	80049dc <xTaskRemoveFromEventList>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8003e6a:	f000 ff09 	bl	8004c80 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003e6e:	7bfb      	ldrb	r3, [r7, #15]
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	dce9      	bgt.n	8003e52 <prvUnlockQueue+0x16>
 8003e7e:	e000      	b.n	8003e82 <prvUnlockQueue+0x46>
                    break;
 8003e80:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	22ff      	movs	r2, #255	; 0xff
 8003e86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003e8a:	f001 fc35 	bl	80056f8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003e8e:	f001 fc03 	bl	8005698 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e98:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e9a:	e011      	b.n	8003ec0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d012      	beq.n	8003eca <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3310      	adds	r3, #16
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 fd97 	bl	80049dc <xTaskRemoveFromEventList>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003eb4:	f000 fee4 	bl	8004c80 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003eb8:	7bbb      	ldrb	r3, [r7, #14]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ec0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	dce9      	bgt.n	8003e9c <prvUnlockQueue+0x60>
 8003ec8:	e000      	b.n	8003ecc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003eca:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	22ff      	movs	r2, #255	; 0xff
 8003ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003ed4:	f001 fc10 	bl	80056f8 <vPortExitCritical>
}
 8003ed8:	bf00      	nop
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003ee8:	f001 fbd6 	bl	8005698 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d102      	bne.n	8003efa <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	e001      	b.n	8003efe <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003efa:	2300      	movs	r3, #0
 8003efc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003efe:	f001 fbfb 	bl	80056f8 <vPortExitCritical>

    return xReturn;
 8003f02:	68fb      	ldr	r3, [r7, #12]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003f16:	2300      	movs	r3, #0
 8003f18:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10a      	bne.n	8003f36 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8003f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	60fb      	str	r3, [r7, #12]
    }
 8003f32:	bf00      	nop
 8003f34:	e7fe      	b.n	8003f34 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d024      	beq.n	8003f86 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	e01e      	b.n	8003f80 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003f42:	4a18      	ldr	r2, [pc, #96]	; (8003fa4 <vQueueAddToRegistry+0x98>)
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	4413      	add	r3, r2
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d105      	bne.n	8003f5e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	4a13      	ldr	r2, [pc, #76]	; (8003fa4 <vQueueAddToRegistry+0x98>)
 8003f58:	4413      	add	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]
                    break;
 8003f5c:	e013      	b.n	8003f86 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10a      	bne.n	8003f7a <vQueueAddToRegistry+0x6e>
 8003f64:	4a0f      	ldr	r2, [pc, #60]	; (8003fa4 <vQueueAddToRegistry+0x98>)
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d104      	bne.n	8003f7a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	4a0b      	ldr	r2, [pc, #44]	; (8003fa4 <vQueueAddToRegistry+0x98>)
 8003f76:	4413      	add	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	2b07      	cmp	r3, #7
 8003f84:	d9dd      	bls.n	8003f42 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d005      	beq.n	8003f98 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8003f98:	bf00      	nop
 8003f9a:	371c      	adds	r7, #28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	20000184 	.word	0x20000184

08003fa8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003fb8:	f001 fb6e 	bl	8005698 <vPortEnterCritical>
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fc2:	b25b      	sxtb	r3, r3
 8003fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc8:	d103      	bne.n	8003fd2 <vQueueWaitForMessageRestricted+0x2a>
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fd8:	b25b      	sxtb	r3, r3
 8003fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fde:	d103      	bne.n	8003fe8 <vQueueWaitForMessageRestricted+0x40>
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fe8:	f001 fb86 	bl	80056f8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d106      	bne.n	8004002 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	3324      	adds	r3, #36	; 0x24
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	68b9      	ldr	r1, [r7, #8]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 fca7 	bl	8004950 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004002:	6978      	ldr	r0, [r7, #20]
 8004004:	f7ff ff1a 	bl	8003e3c <prvUnlockQueue>
    }
 8004008:	bf00      	nop
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004010:	b580      	push	{r7, lr}
 8004012:	b08c      	sub	sp, #48	; 0x30
 8004014:	af04      	add	r7, sp, #16
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	4613      	mov	r3, r2
 800401e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004020:	88fb      	ldrh	r3, [r7, #6]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4618      	mov	r0, r3
 8004026:	f001 fc19 	bl	800585c <pvPortMalloc>
 800402a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d013      	beq.n	800405a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004032:	2058      	movs	r0, #88	; 0x58
 8004034:	f001 fc12 	bl	800585c <pvPortMalloc>
 8004038:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d008      	beq.n	8004052 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8004040:	2258      	movs	r2, #88	; 0x58
 8004042:	2100      	movs	r1, #0
 8004044:	69f8      	ldr	r0, [r7, #28]
 8004046:	f001 fe07 	bl	8005c58 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	631a      	str	r2, [r3, #48]	; 0x30
 8004050:	e005      	b.n	800405e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8004052:	6978      	ldr	r0, [r7, #20]
 8004054:	f001 fcbc 	bl	80059d0 <vPortFree>
 8004058:	e001      	b.n	800405e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800405a:	2300      	movs	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d013      	beq.n	800408c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004064:	88fa      	ldrh	r2, [r7, #6]
 8004066:	2300      	movs	r3, #0
 8004068:	9303      	str	r3, [sp, #12]
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	9302      	str	r3, [sp, #8]
 800406e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004070:	9301      	str	r3, [sp, #4]
 8004072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	68b9      	ldr	r1, [r7, #8]
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 f80e 	bl	800409c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004080:	69f8      	ldr	r0, [r7, #28]
 8004082:	f000 f899 	bl	80041b8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004086:	2301      	movs	r3, #1
 8004088:	61bb      	str	r3, [r7, #24]
 800408a:	e002      	b.n	8004092 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800408c:	f04f 33ff 	mov.w	r3, #4294967295
 8004090:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004092:	69bb      	ldr	r3, [r7, #24]
    }
 8004094:	4618      	mov	r0, r3
 8004096:	3720      	adds	r7, #32
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b088      	sub	sp, #32
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
 80040a8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80040aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	461a      	mov	r2, r3
 80040b4:	21a5      	movs	r1, #165	; 0xa5
 80040b6:	f001 fdcf 	bl	8005c58 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80040ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80040c4:	3b01      	subs	r3, #1
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	f023 0307 	bic.w	r3, r3, #7
 80040d2:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <prvInitialiseNewTask+0x58>
        __asm volatile
 80040de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	617b      	str	r3, [r7, #20]
    }
 80040f0:	bf00      	nop
 80040f2:	e7fe      	b.n	80040f2 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d01e      	beq.n	8004138 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040fa:	2300      	movs	r3, #0
 80040fc:	61fb      	str	r3, [r7, #28]
 80040fe:	e012      	b.n	8004126 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	4413      	add	r3, r2
 8004106:	7819      	ldrb	r1, [r3, #0]
 8004108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	4413      	add	r3, r2
 800410e:	3334      	adds	r3, #52	; 0x34
 8004110:	460a      	mov	r2, r1
 8004112:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	4413      	add	r3, r2
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d006      	beq.n	800412e <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	3301      	adds	r3, #1
 8004124:	61fb      	str	r3, [r7, #28]
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	2b09      	cmp	r3, #9
 800412a:	d9e9      	bls.n	8004100 <prvInitialiseNewTask+0x64>
 800412c:	e000      	b.n	8004130 <prvInitialiseNewTask+0x94>
            {
                break;
 800412e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004132:	2200      	movs	r2, #0
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413a:	2b04      	cmp	r3, #4
 800413c:	d90a      	bls.n	8004154 <prvInitialiseNewTask+0xb8>
        __asm volatile
 800413e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004142:	f383 8811 	msr	BASEPRI, r3
 8004146:	f3bf 8f6f 	isb	sy
 800414a:	f3bf 8f4f 	dsb	sy
 800414e:	613b      	str	r3, [r7, #16]
    }
 8004150:	bf00      	nop
 8004152:	e7fe      	b.n	8004152 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004156:	2b04      	cmp	r3, #4
 8004158:	d901      	bls.n	800415e <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800415a:	2304      	movs	r3, #4
 800415c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004162:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8004164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004168:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800416a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416c:	3304      	adds	r3, #4
 800416e:	4618      	mov	r0, r3
 8004170:	f7ff fbec 	bl	800394c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004176:	3318      	adds	r3, #24
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff fbe7 	bl	800394c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800417e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004182:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004186:	f1c3 0205 	rsb	r2, r3, #5
 800418a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004192:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	68f9      	ldr	r1, [r7, #12]
 8004198:	69b8      	ldr	r0, [r7, #24]
 800419a:	f001 f951 	bl	8005440 <pxPortInitialiseStack>
 800419e:	4602      	mov	r2, r0
 80041a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a2:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80041a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80041aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ae:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80041b0:	bf00      	nop
 80041b2:	3720      	adds	r7, #32
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80041c0:	f001 fa6a 	bl	8005698 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80041c4:	4b40      	ldr	r3, [pc, #256]	; (80042c8 <prvAddNewTaskToReadyList+0x110>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3301      	adds	r3, #1
 80041ca:	4a3f      	ldr	r2, [pc, #252]	; (80042c8 <prvAddNewTaskToReadyList+0x110>)
 80041cc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80041ce:	4b3f      	ldr	r3, [pc, #252]	; (80042cc <prvAddNewTaskToReadyList+0x114>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d109      	bne.n	80041ea <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80041d6:	4a3d      	ldr	r2, [pc, #244]	; (80042cc <prvAddNewTaskToReadyList+0x114>)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80041dc:	4b3a      	ldr	r3, [pc, #232]	; (80042c8 <prvAddNewTaskToReadyList+0x110>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d110      	bne.n	8004206 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80041e4:	f000 fd70 	bl	8004cc8 <prvInitialiseTaskLists>
 80041e8:	e00d      	b.n	8004206 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80041ea:	4b39      	ldr	r3, [pc, #228]	; (80042d0 <prvAddNewTaskToReadyList+0x118>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d109      	bne.n	8004206 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80041f2:	4b36      	ldr	r3, [pc, #216]	; (80042cc <prvAddNewTaskToReadyList+0x114>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d802      	bhi.n	8004206 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004200:	4a32      	ldr	r2, [pc, #200]	; (80042cc <prvAddNewTaskToReadyList+0x114>)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004206:	4b33      	ldr	r3, [pc, #204]	; (80042d4 <prvAddNewTaskToReadyList+0x11c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	3301      	adds	r3, #1
 800420c:	4a31      	ldr	r2, [pc, #196]	; (80042d4 <prvAddNewTaskToReadyList+0x11c>)
 800420e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004210:	4b30      	ldr	r3, [pc, #192]	; (80042d4 <prvAddNewTaskToReadyList+0x11c>)
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421c:	2201      	movs	r2, #1
 800421e:	409a      	lsls	r2, r3
 8004220:	4b2d      	ldr	r3, [pc, #180]	; (80042d8 <prvAddNewTaskToReadyList+0x120>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4313      	orrs	r3, r2
 8004226:	4a2c      	ldr	r2, [pc, #176]	; (80042d8 <prvAddNewTaskToReadyList+0x120>)
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800422e:	492b      	ldr	r1, [pc, #172]	; (80042dc <prvAddNewTaskToReadyList+0x124>)
 8004230:	4613      	mov	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	440b      	add	r3, r1
 800423a:	3304      	adds	r3, #4
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	609a      	str	r2, [r3, #8]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	689a      	ldr	r2, [r3, #8]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	60da      	str	r2, [r3, #12]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	3204      	adds	r2, #4
 8004256:	605a      	str	r2, [r3, #4]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	1d1a      	adds	r2, r3, #4
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	609a      	str	r2, [r3, #8]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004264:	4613      	mov	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4a1b      	ldr	r2, [pc, #108]	; (80042dc <prvAddNewTaskToReadyList+0x124>)
 800426e:	441a      	add	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	615a      	str	r2, [r3, #20]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004278:	4918      	ldr	r1, [pc, #96]	; (80042dc <prvAddNewTaskToReadyList+0x124>)
 800427a:	4613      	mov	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4413      	add	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	440b      	add	r3, r1
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	1c59      	adds	r1, r3, #1
 8004288:	4814      	ldr	r0, [pc, #80]	; (80042dc <prvAddNewTaskToReadyList+0x124>)
 800428a:	4613      	mov	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4403      	add	r3, r0
 8004294:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004296:	f001 fa2f 	bl	80056f8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800429a:	4b0d      	ldr	r3, [pc, #52]	; (80042d0 <prvAddNewTaskToReadyList+0x118>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00e      	beq.n	80042c0 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80042a2:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <prvAddNewTaskToReadyList+0x114>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d207      	bcs.n	80042c0 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80042b0:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <prvAddNewTaskToReadyList+0x128>)
 80042b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80042c0:	bf00      	nop
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	2000029c 	.word	0x2000029c
 80042cc:	200001c4 	.word	0x200001c4
 80042d0:	200002a8 	.word	0x200002a8
 80042d4:	200002b8 	.word	0x200002b8
 80042d8:	200002a4 	.word	0x200002a4
 80042dc:	200001c8 	.word	0x200001c8
 80042e0:	e000ed04 	.word	0xe000ed04

080042e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80042ec:	2300      	movs	r3, #0
 80042ee:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d017      	beq.n	8004326 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80042f6:	4b13      	ldr	r3, [pc, #76]	; (8004344 <vTaskDelay+0x60>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00a      	beq.n	8004314 <vTaskDelay+0x30>
        __asm volatile
 80042fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004302:	f383 8811 	msr	BASEPRI, r3
 8004306:	f3bf 8f6f 	isb	sy
 800430a:	f3bf 8f4f 	dsb	sy
 800430e:	60bb      	str	r3, [r7, #8]
    }
 8004310:	bf00      	nop
 8004312:	e7fe      	b.n	8004312 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8004314:	f000 f86c 	bl	80043f0 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004318:	2100      	movs	r1, #0
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fd8c 	bl	8004e38 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004320:	f000 f874 	bl	800440c <xTaskResumeAll>
 8004324:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d107      	bne.n	800433c <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 800432c:	4b06      	ldr	r3, [pc, #24]	; (8004348 <vTaskDelay+0x64>)
 800432e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800433c:	bf00      	nop
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	200002c4 	.word	0x200002c4
 8004348:	e000ed04 	.word	0xe000ed04

0800434c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8004352:	4b20      	ldr	r3, [pc, #128]	; (80043d4 <vTaskStartScheduler+0x88>)
 8004354:	9301      	str	r3, [sp, #4]
 8004356:	2300      	movs	r3, #0
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	2300      	movs	r3, #0
 800435c:	2282      	movs	r2, #130	; 0x82
 800435e:	491e      	ldr	r1, [pc, #120]	; (80043d8 <vTaskStartScheduler+0x8c>)
 8004360:	481e      	ldr	r0, [pc, #120]	; (80043dc <vTaskStartScheduler+0x90>)
 8004362:	f7ff fe55 	bl	8004010 <xTaskCreate>
 8004366:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d102      	bne.n	8004374 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800436e:	f000 fde3 	bl	8004f38 <xTimerCreateTimerTask>
 8004372:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d116      	bne.n	80043a8 <vTaskStartScheduler+0x5c>
        __asm volatile
 800437a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437e:	f383 8811 	msr	BASEPRI, r3
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	60bb      	str	r3, [r7, #8]
    }
 800438c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800438e:	4b14      	ldr	r3, [pc, #80]	; (80043e0 <vTaskStartScheduler+0x94>)
 8004390:	f04f 32ff 	mov.w	r2, #4294967295
 8004394:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004396:	4b13      	ldr	r3, [pc, #76]	; (80043e4 <vTaskStartScheduler+0x98>)
 8004398:	2201      	movs	r2, #1
 800439a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800439c:	4b12      	ldr	r3, [pc, #72]	; (80043e8 <vTaskStartScheduler+0x9c>)
 800439e:	2200      	movs	r2, #0
 80043a0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80043a2:	f001 f8d7 	bl	8005554 <xPortStartScheduler>
 80043a6:	e00e      	b.n	80043c6 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ae:	d10a      	bne.n	80043c6 <vTaskStartScheduler+0x7a>
        __asm volatile
 80043b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	607b      	str	r3, [r7, #4]
    }
 80043c2:	bf00      	nop
 80043c4:	e7fe      	b.n	80043c4 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80043c6:	4b09      	ldr	r3, [pc, #36]	; (80043ec <vTaskStartScheduler+0xa0>)
 80043c8:	681b      	ldr	r3, [r3, #0]
}
 80043ca:	bf00      	nop
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	200002c0 	.word	0x200002c0
 80043d8:	08005cc8 	.word	0x08005cc8
 80043dc:	08004c99 	.word	0x08004c99
 80043e0:	200002bc 	.word	0x200002bc
 80043e4:	200002a8 	.word	0x200002a8
 80043e8:	200002a0 	.word	0x200002a0
 80043ec:	20000010 	.word	0x20000010

080043f0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80043f4:	4b04      	ldr	r3, [pc, #16]	; (8004408 <vTaskSuspendAll+0x18>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3301      	adds	r3, #1
 80043fa:	4a03      	ldr	r2, [pc, #12]	; (8004408 <vTaskSuspendAll+0x18>)
 80043fc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80043fe:	bf00      	nop
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	200002c4 	.word	0x200002c4

0800440c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b088      	sub	sp, #32
 8004410:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004412:	2300      	movs	r3, #0
 8004414:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004416:	2300      	movs	r3, #0
 8004418:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800441a:	4b71      	ldr	r3, [pc, #452]	; (80045e0 <xTaskResumeAll+0x1d4>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10a      	bne.n	8004438 <xTaskResumeAll+0x2c>
        __asm volatile
 8004422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	607b      	str	r3, [r7, #4]
    }
 8004434:	bf00      	nop
 8004436:	e7fe      	b.n	8004436 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004438:	f001 f92e 	bl	8005698 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800443c:	4b68      	ldr	r3, [pc, #416]	; (80045e0 <xTaskResumeAll+0x1d4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3b01      	subs	r3, #1
 8004442:	4a67      	ldr	r2, [pc, #412]	; (80045e0 <xTaskResumeAll+0x1d4>)
 8004444:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004446:	4b66      	ldr	r3, [pc, #408]	; (80045e0 <xTaskResumeAll+0x1d4>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	f040 80c0 	bne.w	80045d0 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004450:	4b64      	ldr	r3, [pc, #400]	; (80045e4 <xTaskResumeAll+0x1d8>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 80bb 	beq.w	80045d0 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800445a:	e08a      	b.n	8004572 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800445c:	4b62      	ldr	r3, [pc, #392]	; (80045e8 <xTaskResumeAll+0x1dc>)
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004468:	613b      	str	r3, [r7, #16]
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	69fa      	ldr	r2, [r7, #28]
 8004470:	6a12      	ldr	r2, [r2, #32]
 8004472:	609a      	str	r2, [r3, #8]
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	69fa      	ldr	r2, [r7, #28]
 800447a:	69d2      	ldr	r2, [r2, #28]
 800447c:	605a      	str	r2, [r3, #4]
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	3318      	adds	r3, #24
 8004486:	429a      	cmp	r2, r3
 8004488:	d103      	bne.n	8004492 <xTaskResumeAll+0x86>
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	6a1a      	ldr	r2, [r3, #32]
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	605a      	str	r2, [r3, #4]
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	2200      	movs	r2, #0
 8004496:	629a      	str	r2, [r3, #40]	; 0x28
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	1e5a      	subs	r2, r3, #1
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	69fa      	ldr	r2, [r7, #28]
 80044ae:	68d2      	ldr	r2, [r2, #12]
 80044b0:	609a      	str	r2, [r3, #8]
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	69fa      	ldr	r2, [r7, #28]
 80044b8:	6892      	ldr	r2, [r2, #8]
 80044ba:	605a      	str	r2, [r3, #4]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	3304      	adds	r3, #4
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d103      	bne.n	80044d0 <xTaskResumeAll+0xc4>
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	68da      	ldr	r2, [r3, #12]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	605a      	str	r2, [r3, #4]
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	2200      	movs	r2, #0
 80044d4:	615a      	str	r2, [r3, #20]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	1e5a      	subs	r2, r3, #1
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e4:	2201      	movs	r2, #1
 80044e6:	409a      	lsls	r2, r3
 80044e8:	4b40      	ldr	r3, [pc, #256]	; (80045ec <xTaskResumeAll+0x1e0>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	4a3f      	ldr	r2, [pc, #252]	; (80045ec <xTaskResumeAll+0x1e0>)
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f6:	493e      	ldr	r1, [pc, #248]	; (80045f0 <xTaskResumeAll+0x1e4>)
 80044f8:	4613      	mov	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	440b      	add	r3, r1
 8004502:	3304      	adds	r3, #4
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	60bb      	str	r3, [r7, #8]
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	609a      	str	r2, [r3, #8]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	60da      	str	r2, [r3, #12]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	69fa      	ldr	r2, [r7, #28]
 800451c:	3204      	adds	r2, #4
 800451e:	605a      	str	r2, [r3, #4]
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	1d1a      	adds	r2, r3, #4
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	609a      	str	r2, [r3, #8]
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452c:	4613      	mov	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4a2e      	ldr	r2, [pc, #184]	; (80045f0 <xTaskResumeAll+0x1e4>)
 8004536:	441a      	add	r2, r3
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	615a      	str	r2, [r3, #20]
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004540:	492b      	ldr	r1, [pc, #172]	; (80045f0 <xTaskResumeAll+0x1e4>)
 8004542:	4613      	mov	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	440b      	add	r3, r1
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	1c59      	adds	r1, r3, #1
 8004550:	4827      	ldr	r0, [pc, #156]	; (80045f0 <xTaskResumeAll+0x1e4>)
 8004552:	4613      	mov	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4403      	add	r3, r0
 800455c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004562:	4b24      	ldr	r3, [pc, #144]	; (80045f4 <xTaskResumeAll+0x1e8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004568:	429a      	cmp	r2, r3
 800456a:	d302      	bcc.n	8004572 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 800456c:	4b22      	ldr	r3, [pc, #136]	; (80045f8 <xTaskResumeAll+0x1ec>)
 800456e:	2201      	movs	r2, #1
 8004570:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004572:	4b1d      	ldr	r3, [pc, #116]	; (80045e8 <xTaskResumeAll+0x1dc>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	f47f af70 	bne.w	800445c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004582:	f000 fc1f 	bl	8004dc4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004586:	4b1d      	ldr	r3, [pc, #116]	; (80045fc <xTaskResumeAll+0x1f0>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d010      	beq.n	80045b4 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004592:	f000 f847 	bl	8004624 <xTaskIncrementTick>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d002      	beq.n	80045a2 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 800459c:	4b16      	ldr	r3, [pc, #88]	; (80045f8 <xTaskResumeAll+0x1ec>)
 800459e:	2201      	movs	r2, #1
 80045a0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	3b01      	subs	r3, #1
 80045a6:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1f1      	bne.n	8004592 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 80045ae:	4b13      	ldr	r3, [pc, #76]	; (80045fc <xTaskResumeAll+0x1f0>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80045b4:	4b10      	ldr	r3, [pc, #64]	; (80045f8 <xTaskResumeAll+0x1ec>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d009      	beq.n	80045d0 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80045bc:	2301      	movs	r3, #1
 80045be:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80045c0:	4b0f      	ldr	r3, [pc, #60]	; (8004600 <xTaskResumeAll+0x1f4>)
 80045c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80045d0:	f001 f892 	bl	80056f8 <vPortExitCritical>

    return xAlreadyYielded;
 80045d4:	69bb      	ldr	r3, [r7, #24]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3720      	adds	r7, #32
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	200002c4 	.word	0x200002c4
 80045e4:	2000029c 	.word	0x2000029c
 80045e8:	2000025c 	.word	0x2000025c
 80045ec:	200002a4 	.word	0x200002a4
 80045f0:	200001c8 	.word	0x200001c8
 80045f4:	200001c4 	.word	0x200001c4
 80045f8:	200002b0 	.word	0x200002b0
 80045fc:	200002ac 	.word	0x200002ac
 8004600:	e000ed04 	.word	0xe000ed04

08004604 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800460a:	4b05      	ldr	r3, [pc, #20]	; (8004620 <xTaskGetTickCount+0x1c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004610:	687b      	ldr	r3, [r7, #4]
}
 8004612:	4618      	mov	r0, r3
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	200002a0 	.word	0x200002a0

08004624 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08a      	sub	sp, #40	; 0x28
 8004628:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800462a:	2300      	movs	r3, #0
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800462e:	4b7d      	ldr	r3, [pc, #500]	; (8004824 <xTaskIncrementTick+0x200>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	f040 80ec 	bne.w	8004810 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004638:	4b7b      	ldr	r3, [pc, #492]	; (8004828 <xTaskIncrementTick+0x204>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	3301      	adds	r3, #1
 800463e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004640:	4a79      	ldr	r2, [pc, #484]	; (8004828 <xTaskIncrementTick+0x204>)
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d120      	bne.n	800468e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800464c:	4b77      	ldr	r3, [pc, #476]	; (800482c <xTaskIncrementTick+0x208>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <xTaskIncrementTick+0x48>
        __asm volatile
 8004656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465a:	f383 8811 	msr	BASEPRI, r3
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	607b      	str	r3, [r7, #4]
    }
 8004668:	bf00      	nop
 800466a:	e7fe      	b.n	800466a <xTaskIncrementTick+0x46>
 800466c:	4b6f      	ldr	r3, [pc, #444]	; (800482c <xTaskIncrementTick+0x208>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	61fb      	str	r3, [r7, #28]
 8004672:	4b6f      	ldr	r3, [pc, #444]	; (8004830 <xTaskIncrementTick+0x20c>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a6d      	ldr	r2, [pc, #436]	; (800482c <xTaskIncrementTick+0x208>)
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	4a6d      	ldr	r2, [pc, #436]	; (8004830 <xTaskIncrementTick+0x20c>)
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	6013      	str	r3, [r2, #0]
 8004680:	4b6c      	ldr	r3, [pc, #432]	; (8004834 <xTaskIncrementTick+0x210>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3301      	adds	r3, #1
 8004686:	4a6b      	ldr	r2, [pc, #428]	; (8004834 <xTaskIncrementTick+0x210>)
 8004688:	6013      	str	r3, [r2, #0]
 800468a:	f000 fb9b 	bl	8004dc4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800468e:	4b6a      	ldr	r3, [pc, #424]	; (8004838 <xTaskIncrementTick+0x214>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6a3a      	ldr	r2, [r7, #32]
 8004694:	429a      	cmp	r2, r3
 8004696:	f0c0 80a6 	bcc.w	80047e6 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800469a:	4b64      	ldr	r3, [pc, #400]	; (800482c <xTaskIncrementTick+0x208>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d104      	bne.n	80046ae <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046a4:	4b64      	ldr	r3, [pc, #400]	; (8004838 <xTaskIncrementTick+0x214>)
 80046a6:	f04f 32ff 	mov.w	r2, #4294967295
 80046aa:	601a      	str	r2, [r3, #0]
                    break;
 80046ac:	e09b      	b.n	80047e6 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046ae:	4b5f      	ldr	r3, [pc, #380]	; (800482c <xTaskIncrementTick+0x208>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80046be:	6a3a      	ldr	r2, [r7, #32]
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d203      	bcs.n	80046ce <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80046c6:	4a5c      	ldr	r2, [pc, #368]	; (8004838 <xTaskIncrementTick+0x214>)
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80046cc:	e08b      	b.n	80047e6 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	613b      	str	r3, [r7, #16]
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	68d2      	ldr	r2, [r2, #12]
 80046dc:	609a      	str	r2, [r3, #8]
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	6892      	ldr	r2, [r2, #8]
 80046e6:	605a      	str	r2, [r3, #4]
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	3304      	adds	r3, #4
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d103      	bne.n	80046fc <xTaskIncrementTick+0xd8>
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	605a      	str	r2, [r3, #4]
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	2200      	movs	r2, #0
 8004700:	615a      	str	r2, [r3, #20]
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	1e5a      	subs	r2, r3, #1
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004710:	2b00      	cmp	r3, #0
 8004712:	d01e      	beq.n	8004752 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	6a12      	ldr	r2, [r2, #32]
 8004722:	609a      	str	r2, [r3, #8]
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	69d2      	ldr	r2, [r2, #28]
 800472c:	605a      	str	r2, [r3, #4]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	3318      	adds	r3, #24
 8004736:	429a      	cmp	r2, r3
 8004738:	d103      	bne.n	8004742 <xTaskIncrementTick+0x11e>
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	6a1a      	ldr	r2, [r3, #32]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	605a      	str	r2, [r3, #4]
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	2200      	movs	r2, #0
 8004746:	629a      	str	r2, [r3, #40]	; 0x28
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	1e5a      	subs	r2, r3, #1
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004756:	2201      	movs	r2, #1
 8004758:	409a      	lsls	r2, r3
 800475a:	4b38      	ldr	r3, [pc, #224]	; (800483c <xTaskIncrementTick+0x218>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4313      	orrs	r3, r2
 8004760:	4a36      	ldr	r2, [pc, #216]	; (800483c <xTaskIncrementTick+0x218>)
 8004762:	6013      	str	r3, [r2, #0]
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004768:	4935      	ldr	r1, [pc, #212]	; (8004840 <xTaskIncrementTick+0x21c>)
 800476a:	4613      	mov	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	440b      	add	r3, r1
 8004774:	3304      	adds	r3, #4
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	60bb      	str	r3, [r7, #8]
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	609a      	str	r2, [r3, #8]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	60da      	str	r2, [r3, #12]
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	3204      	adds	r2, #4
 8004790:	605a      	str	r2, [r3, #4]
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	1d1a      	adds	r2, r3, #4
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	609a      	str	r2, [r3, #8]
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479e:	4613      	mov	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4a26      	ldr	r2, [pc, #152]	; (8004840 <xTaskIncrementTick+0x21c>)
 80047a8:	441a      	add	r2, r3
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	615a      	str	r2, [r3, #20]
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b2:	4923      	ldr	r1, [pc, #140]	; (8004840 <xTaskIncrementTick+0x21c>)
 80047b4:	4613      	mov	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	440b      	add	r3, r1
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	1c59      	adds	r1, r3, #1
 80047c2:	481f      	ldr	r0, [pc, #124]	; (8004840 <xTaskIncrementTick+0x21c>)
 80047c4:	4613      	mov	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4403      	add	r3, r0
 80047ce:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d4:	4b1b      	ldr	r3, [pc, #108]	; (8004844 <xTaskIncrementTick+0x220>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047da:	429a      	cmp	r2, r3
 80047dc:	f67f af5d 	bls.w	800469a <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80047e0:	2301      	movs	r3, #1
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047e4:	e759      	b.n	800469a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047e6:	4b17      	ldr	r3, [pc, #92]	; (8004844 <xTaskIncrementTick+0x220>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ec:	4914      	ldr	r1, [pc, #80]	; (8004840 <xTaskIncrementTick+0x21c>)
 80047ee:	4613      	mov	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	440b      	add	r3, r1
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d901      	bls.n	8004802 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 80047fe:	2301      	movs	r3, #1
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8004802:	4b11      	ldr	r3, [pc, #68]	; (8004848 <xTaskIncrementTick+0x224>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d007      	beq.n	800481a <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 800480a:	2301      	movs	r3, #1
 800480c:	627b      	str	r3, [r7, #36]	; 0x24
 800480e:	e004      	b.n	800481a <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004810:	4b0e      	ldr	r3, [pc, #56]	; (800484c <xTaskIncrementTick+0x228>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	3301      	adds	r3, #1
 8004816:	4a0d      	ldr	r2, [pc, #52]	; (800484c <xTaskIncrementTick+0x228>)
 8004818:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800481c:	4618      	mov	r0, r3
 800481e:	3728      	adds	r7, #40	; 0x28
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	200002c4 	.word	0x200002c4
 8004828:	200002a0 	.word	0x200002a0
 800482c:	20000254 	.word	0x20000254
 8004830:	20000258 	.word	0x20000258
 8004834:	200002b4 	.word	0x200002b4
 8004838:	200002bc 	.word	0x200002bc
 800483c:	200002a4 	.word	0x200002a4
 8004840:	200001c8 	.word	0x200001c8
 8004844:	200001c4 	.word	0x200001c4
 8004848:	200002b0 	.word	0x200002b0
 800484c:	200002ac 	.word	0x200002ac

08004850 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004856:	4b27      	ldr	r3, [pc, #156]	; (80048f4 <vTaskSwitchContext+0xa4>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800485e:	4b26      	ldr	r3, [pc, #152]	; (80048f8 <vTaskSwitchContext+0xa8>)
 8004860:	2201      	movs	r2, #1
 8004862:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8004864:	e03f      	b.n	80048e6 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8004866:	4b24      	ldr	r3, [pc, #144]	; (80048f8 <vTaskSwitchContext+0xa8>)
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800486c:	4b23      	ldr	r3, [pc, #140]	; (80048fc <vTaskSwitchContext+0xac>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	fab3 f383 	clz	r3, r3
 8004878:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800487a:	7afb      	ldrb	r3, [r7, #11]
 800487c:	f1c3 031f 	rsb	r3, r3, #31
 8004880:	617b      	str	r3, [r7, #20]
 8004882:	491f      	ldr	r1, [pc, #124]	; (8004900 <vTaskSwitchContext+0xb0>)
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	4613      	mov	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	440b      	add	r3, r1
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10a      	bne.n	80048ac <vTaskSwitchContext+0x5c>
        __asm volatile
 8004896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489a:	f383 8811 	msr	BASEPRI, r3
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	607b      	str	r3, [r7, #4]
    }
 80048a8:	bf00      	nop
 80048aa:	e7fe      	b.n	80048aa <vTaskSwitchContext+0x5a>
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	4613      	mov	r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4413      	add	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4a12      	ldr	r2, [pc, #72]	; (8004900 <vTaskSwitchContext+0xb0>)
 80048b8:	4413      	add	r3, r2
 80048ba:	613b      	str	r3, [r7, #16]
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	605a      	str	r2, [r3, #4]
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	3308      	adds	r3, #8
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d104      	bne.n	80048dc <vTaskSwitchContext+0x8c>
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	605a      	str	r2, [r3, #4]
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	4a08      	ldr	r2, [pc, #32]	; (8004904 <vTaskSwitchContext+0xb4>)
 80048e4:	6013      	str	r3, [r2, #0]
}
 80048e6:	bf00      	nop
 80048e8:	371c      	adds	r7, #28
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	200002c4 	.word	0x200002c4
 80048f8:	200002b0 	.word	0x200002b0
 80048fc:	200002a4 	.word	0x200002a4
 8004900:	200001c8 	.word	0x200001c8
 8004904:	200001c4 	.word	0x200001c4

08004908 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10a      	bne.n	800492e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	60fb      	str	r3, [r7, #12]
    }
 800492a:	bf00      	nop
 800492c:	e7fe      	b.n	800492c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800492e:	4b07      	ldr	r3, [pc, #28]	; (800494c <vTaskPlaceOnEventList+0x44>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	3318      	adds	r3, #24
 8004934:	4619      	mov	r1, r3
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7ff f815 	bl	8003966 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800493c:	2101      	movs	r1, #1
 800493e:	6838      	ldr	r0, [r7, #0]
 8004940:	f000 fa7a 	bl	8004e38 <prvAddCurrentTaskToDelayedList>
}
 8004944:	bf00      	nop
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	200001c4 	.word	0x200001c4

08004950 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10a      	bne.n	8004978 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8004962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	613b      	str	r3, [r7, #16]
    }
 8004974:	bf00      	nop
 8004976:	e7fe      	b.n	8004976 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	617b      	str	r3, [r7, #20]
 800497e:	4b16      	ldr	r3, [pc, #88]	; (80049d8 <vTaskPlaceOnEventListRestricted+0x88>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	61da      	str	r2, [r3, #28]
 8004986:	4b14      	ldr	r3, [pc, #80]	; (80049d8 <vTaskPlaceOnEventListRestricted+0x88>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	6892      	ldr	r2, [r2, #8]
 800498e:	621a      	str	r2, [r3, #32]
 8004990:	4b11      	ldr	r3, [pc, #68]	; (80049d8 <vTaskPlaceOnEventListRestricted+0x88>)
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	3218      	adds	r2, #24
 800499a:	605a      	str	r2, [r3, #4]
 800499c:	4b0e      	ldr	r3, [pc, #56]	; (80049d8 <vTaskPlaceOnEventListRestricted+0x88>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f103 0218 	add.w	r2, r3, #24
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	609a      	str	r2, [r3, #8]
 80049a8:	4b0b      	ldr	r3, [pc, #44]	; (80049d8 <vTaskPlaceOnEventListRestricted+0x88>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	629a      	str	r2, [r3, #40]	; 0x28
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	1c5a      	adds	r2, r3, #1
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80049c0:	f04f 33ff 	mov.w	r3, #4294967295
 80049c4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80049c6:	6879      	ldr	r1, [r7, #4]
 80049c8:	68b8      	ldr	r0, [r7, #8]
 80049ca:	f000 fa35 	bl	8004e38 <prvAddCurrentTaskToDelayedList>
    }
 80049ce:	bf00      	nop
 80049d0:	3718      	adds	r7, #24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	200001c4 	.word	0x200001c4

080049dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049dc:	b480      	push	{r7}
 80049de:	b08b      	sub	sp, #44	; 0x2c
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10a      	bne.n	8004a08 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80049f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	60fb      	str	r3, [r7, #12]
    }
 8004a04:	bf00      	nop
 8004a06:	e7fe      	b.n	8004a06 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0c:	61fb      	str	r3, [r7, #28]
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	6a3a      	ldr	r2, [r7, #32]
 8004a14:	6a12      	ldr	r2, [r2, #32]
 8004a16:	609a      	str	r2, [r3, #8]
 8004a18:	6a3b      	ldr	r3, [r7, #32]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	6a3a      	ldr	r2, [r7, #32]
 8004a1e:	69d2      	ldr	r2, [r2, #28]
 8004a20:	605a      	str	r2, [r3, #4]
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	3318      	adds	r3, #24
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d103      	bne.n	8004a36 <xTaskRemoveFromEventList+0x5a>
 8004a2e:	6a3b      	ldr	r3, [r7, #32]
 8004a30:	6a1a      	ldr	r2, [r3, #32]
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	605a      	str	r2, [r3, #4]
 8004a36:	6a3b      	ldr	r3, [r7, #32]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	629a      	str	r2, [r3, #40]	; 0x28
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	1e5a      	subs	r2, r3, #1
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a46:	4b4a      	ldr	r3, [pc, #296]	; (8004b70 <xTaskRemoveFromEventList+0x194>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d15e      	bne.n	8004b0c <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	617b      	str	r3, [r7, #20]
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	6a3a      	ldr	r2, [r7, #32]
 8004a5a:	68d2      	ldr	r2, [r2, #12]
 8004a5c:	609a      	str	r2, [r3, #8]
 8004a5e:	6a3b      	ldr	r3, [r7, #32]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	6a3a      	ldr	r2, [r7, #32]
 8004a64:	6892      	ldr	r2, [r2, #8]
 8004a66:	605a      	str	r2, [r3, #4]
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	3304      	adds	r3, #4
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d103      	bne.n	8004a7c <xTaskRemoveFromEventList+0xa0>
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	605a      	str	r2, [r3, #4]
 8004a7c:	6a3b      	ldr	r3, [r7, #32]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	615a      	str	r2, [r3, #20]
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	1e5a      	subs	r2, r3, #1
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a90:	2201      	movs	r2, #1
 8004a92:	409a      	lsls	r2, r3
 8004a94:	4b37      	ldr	r3, [pc, #220]	; (8004b74 <xTaskRemoveFromEventList+0x198>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	4a36      	ldr	r2, [pc, #216]	; (8004b74 <xTaskRemoveFromEventList+0x198>)
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	6a3b      	ldr	r3, [r7, #32]
 8004aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa2:	4935      	ldr	r1, [pc, #212]	; (8004b78 <xTaskRemoveFromEventList+0x19c>)
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	440b      	add	r3, r1
 8004aae:	3304      	adds	r3, #4
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	613b      	str	r3, [r7, #16]
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	609a      	str	r2, [r3, #8]
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	60da      	str	r2, [r3, #12]
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	6a3a      	ldr	r2, [r7, #32]
 8004ac8:	3204      	adds	r2, #4
 8004aca:	605a      	str	r2, [r3, #4]
 8004acc:	6a3b      	ldr	r3, [r7, #32]
 8004ace:	1d1a      	adds	r2, r3, #4
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	609a      	str	r2, [r3, #8]
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4a25      	ldr	r2, [pc, #148]	; (8004b78 <xTaskRemoveFromEventList+0x19c>)
 8004ae2:	441a      	add	r2, r3
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	615a      	str	r2, [r3, #20]
 8004ae8:	6a3b      	ldr	r3, [r7, #32]
 8004aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aec:	4922      	ldr	r1, [pc, #136]	; (8004b78 <xTaskRemoveFromEventList+0x19c>)
 8004aee:	4613      	mov	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	440b      	add	r3, r1
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	1c59      	adds	r1, r3, #1
 8004afc:	481e      	ldr	r0, [pc, #120]	; (8004b78 <xTaskRemoveFromEventList+0x19c>)
 8004afe:	4613      	mov	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4403      	add	r3, r0
 8004b08:	6019      	str	r1, [r3, #0]
 8004b0a:	e01b      	b.n	8004b44 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b0c:	4b1b      	ldr	r3, [pc, #108]	; (8004b7c <xTaskRemoveFromEventList+0x1a0>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	61bb      	str	r3, [r7, #24]
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	61da      	str	r2, [r3, #28]
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	621a      	str	r2, [r3, #32]
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	6a3a      	ldr	r2, [r7, #32]
 8004b26:	3218      	adds	r2, #24
 8004b28:	605a      	str	r2, [r3, #4]
 8004b2a:	6a3b      	ldr	r3, [r7, #32]
 8004b2c:	f103 0218 	add.w	r2, r3, #24
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	609a      	str	r2, [r3, #8]
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	4a11      	ldr	r2, [pc, #68]	; (8004b7c <xTaskRemoveFromEventList+0x1a0>)
 8004b38:	629a      	str	r2, [r3, #40]	; 0x28
 8004b3a:	4b10      	ldr	r3, [pc, #64]	; (8004b7c <xTaskRemoveFromEventList+0x1a0>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	4a0e      	ldr	r2, [pc, #56]	; (8004b7c <xTaskRemoveFromEventList+0x1a0>)
 8004b42:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b44:	6a3b      	ldr	r3, [r7, #32]
 8004b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b48:	4b0d      	ldr	r3, [pc, #52]	; (8004b80 <xTaskRemoveFromEventList+0x1a4>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d905      	bls.n	8004b5e <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004b52:	2301      	movs	r3, #1
 8004b54:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004b56:	4b0b      	ldr	r3, [pc, #44]	; (8004b84 <xTaskRemoveFromEventList+0x1a8>)
 8004b58:	2201      	movs	r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	e001      	b.n	8004b62 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	372c      	adds	r7, #44	; 0x2c
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	200002c4 	.word	0x200002c4
 8004b74:	200002a4 	.word	0x200002a4
 8004b78:	200001c8 	.word	0x200001c8
 8004b7c:	2000025c 	.word	0x2000025c
 8004b80:	200001c4 	.word	0x200001c4
 8004b84:	200002b0 	.word	0x200002b0

08004b88 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b90:	4b06      	ldr	r3, [pc, #24]	; (8004bac <vTaskInternalSetTimeOutState+0x24>)
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004b98:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <vTaskInternalSetTimeOutState+0x28>)
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	605a      	str	r2, [r3, #4]
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	200002b4 	.word	0x200002b4
 8004bb0:	200002a0 	.word	0x200002a0

08004bb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b088      	sub	sp, #32
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10a      	bne.n	8004bda <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	613b      	str	r3, [r7, #16]
    }
 8004bd6:	bf00      	nop
 8004bd8:	e7fe      	b.n	8004bd8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10a      	bne.n	8004bf6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be4:	f383 8811 	msr	BASEPRI, r3
 8004be8:	f3bf 8f6f 	isb	sy
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	60fb      	str	r3, [r7, #12]
    }
 8004bf2:	bf00      	nop
 8004bf4:	e7fe      	b.n	8004bf4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004bf6:	f000 fd4f 	bl	8005698 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004bfa:	4b1f      	ldr	r3, [pc, #124]	; (8004c78 <xTaskCheckForTimeOut+0xc4>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c12:	d102      	bne.n	8004c1a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004c14:	2300      	movs	r3, #0
 8004c16:	61fb      	str	r3, [r7, #28]
 8004c18:	e026      	b.n	8004c68 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	4b17      	ldr	r3, [pc, #92]	; (8004c7c <xTaskCheckForTimeOut+0xc8>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d00a      	beq.n	8004c3c <xTaskCheckForTimeOut+0x88>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d305      	bcc.n	8004c3c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004c30:	2301      	movs	r3, #1
 8004c32:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	2200      	movs	r2, #0
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	e015      	b.n	8004c68 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d20b      	bcs.n	8004c5e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	1ad2      	subs	r2, r2, r3
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7ff ff98 	bl	8004b88 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	61fb      	str	r3, [r7, #28]
 8004c5c:	e004      	b.n	8004c68 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2200      	movs	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004c64:	2301      	movs	r3, #1
 8004c66:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004c68:	f000 fd46 	bl	80056f8 <vPortExitCritical>

    return xReturn;
 8004c6c:	69fb      	ldr	r3, [r7, #28]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3720      	adds	r7, #32
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	200002a0 	.word	0x200002a0
 8004c7c:	200002b4 	.word	0x200002b4

08004c80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004c80:	b480      	push	{r7}
 8004c82:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004c84:	4b03      	ldr	r3, [pc, #12]	; (8004c94 <vTaskMissedYield+0x14>)
 8004c86:	2201      	movs	r2, #1
 8004c88:	601a      	str	r2, [r3, #0]
}
 8004c8a:	bf00      	nop
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	200002b0 	.word	0x200002b0

08004c98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004ca0:	f000 f852 	bl	8004d48 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ca4:	4b06      	ldr	r3, [pc, #24]	; (8004cc0 <prvIdleTask+0x28>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d9f9      	bls.n	8004ca0 <prvIdleTask+0x8>
            {
                taskYIELD();
 8004cac:	4b05      	ldr	r3, [pc, #20]	; (8004cc4 <prvIdleTask+0x2c>)
 8004cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004cbc:	e7f0      	b.n	8004ca0 <prvIdleTask+0x8>
 8004cbe:	bf00      	nop
 8004cc0:	200001c8 	.word	0x200001c8
 8004cc4:	e000ed04 	.word	0xe000ed04

08004cc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cce:	2300      	movs	r3, #0
 8004cd0:	607b      	str	r3, [r7, #4]
 8004cd2:	e00c      	b.n	8004cee <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4a12      	ldr	r2, [pc, #72]	; (8004d28 <prvInitialiseTaskLists+0x60>)
 8004ce0:	4413      	add	r3, r2
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fe fe12 	bl	800390c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3301      	adds	r3, #1
 8004cec:	607b      	str	r3, [r7, #4]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b04      	cmp	r3, #4
 8004cf2:	d9ef      	bls.n	8004cd4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004cf4:	480d      	ldr	r0, [pc, #52]	; (8004d2c <prvInitialiseTaskLists+0x64>)
 8004cf6:	f7fe fe09 	bl	800390c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004cfa:	480d      	ldr	r0, [pc, #52]	; (8004d30 <prvInitialiseTaskLists+0x68>)
 8004cfc:	f7fe fe06 	bl	800390c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004d00:	480c      	ldr	r0, [pc, #48]	; (8004d34 <prvInitialiseTaskLists+0x6c>)
 8004d02:	f7fe fe03 	bl	800390c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004d06:	480c      	ldr	r0, [pc, #48]	; (8004d38 <prvInitialiseTaskLists+0x70>)
 8004d08:	f7fe fe00 	bl	800390c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004d0c:	480b      	ldr	r0, [pc, #44]	; (8004d3c <prvInitialiseTaskLists+0x74>)
 8004d0e:	f7fe fdfd 	bl	800390c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004d12:	4b0b      	ldr	r3, [pc, #44]	; (8004d40 <prvInitialiseTaskLists+0x78>)
 8004d14:	4a05      	ldr	r2, [pc, #20]	; (8004d2c <prvInitialiseTaskLists+0x64>)
 8004d16:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d18:	4b0a      	ldr	r3, [pc, #40]	; (8004d44 <prvInitialiseTaskLists+0x7c>)
 8004d1a:	4a05      	ldr	r2, [pc, #20]	; (8004d30 <prvInitialiseTaskLists+0x68>)
 8004d1c:	601a      	str	r2, [r3, #0]
}
 8004d1e:	bf00      	nop
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	200001c8 	.word	0x200001c8
 8004d2c:	2000022c 	.word	0x2000022c
 8004d30:	20000240 	.word	0x20000240
 8004d34:	2000025c 	.word	0x2000025c
 8004d38:	20000270 	.word	0x20000270
 8004d3c:	20000288 	.word	0x20000288
 8004d40:	20000254 	.word	0x20000254
 8004d44:	20000258 	.word	0x20000258

08004d48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d4e:	e019      	b.n	8004d84 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8004d50:	f000 fca2 	bl	8005698 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d54:	4b10      	ldr	r3, [pc, #64]	; (8004d98 <prvCheckTasksWaitingTermination+0x50>)
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	3304      	adds	r3, #4
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7fe fe39 	bl	80039d8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8004d66:	4b0d      	ldr	r3, [pc, #52]	; (8004d9c <prvCheckTasksWaitingTermination+0x54>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	4a0b      	ldr	r2, [pc, #44]	; (8004d9c <prvCheckTasksWaitingTermination+0x54>)
 8004d6e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8004d70:	4b0b      	ldr	r3, [pc, #44]	; (8004da0 <prvCheckTasksWaitingTermination+0x58>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	3b01      	subs	r3, #1
 8004d76:	4a0a      	ldr	r2, [pc, #40]	; (8004da0 <prvCheckTasksWaitingTermination+0x58>)
 8004d78:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8004d7a:	f000 fcbd 	bl	80056f8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f810 	bl	8004da4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d84:	4b06      	ldr	r3, [pc, #24]	; (8004da0 <prvCheckTasksWaitingTermination+0x58>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1e1      	bne.n	8004d50 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004d8c:	bf00      	nop
 8004d8e:	bf00      	nop
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	20000270 	.word	0x20000270
 8004d9c:	2000029c 	.word	0x2000029c
 8004da0:	20000284 	.word	0x20000284

08004da4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 fe0d 	bl	80059d0 <vPortFree>
            vPortFree( pxTCB );
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 fe0a 	bl	80059d0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004dbc:	bf00      	nop
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dc8:	4b0a      	ldr	r3, [pc, #40]	; (8004df4 <prvResetNextTaskUnblockTime+0x30>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d104      	bne.n	8004ddc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004dd2:	4b09      	ldr	r3, [pc, #36]	; (8004df8 <prvResetNextTaskUnblockTime+0x34>)
 8004dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8004dd8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004dda:	e005      	b.n	8004de8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004ddc:	4b05      	ldr	r3, [pc, #20]	; (8004df4 <prvResetNextTaskUnblockTime+0x30>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a04      	ldr	r2, [pc, #16]	; (8004df8 <prvResetNextTaskUnblockTime+0x34>)
 8004de6:	6013      	str	r3, [r2, #0]
}
 8004de8:	bf00      	nop
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	20000254 	.word	0x20000254
 8004df8:	200002bc 	.word	0x200002bc

08004dfc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004e02:	4b0b      	ldr	r3, [pc, #44]	; (8004e30 <xTaskGetSchedulerState+0x34>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d102      	bne.n	8004e10 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	607b      	str	r3, [r7, #4]
 8004e0e:	e008      	b.n	8004e22 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e10:	4b08      	ldr	r3, [pc, #32]	; (8004e34 <xTaskGetSchedulerState+0x38>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d102      	bne.n	8004e1e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004e18:	2302      	movs	r3, #2
 8004e1a:	607b      	str	r3, [r7, #4]
 8004e1c:	e001      	b.n	8004e22 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004e22:	687b      	ldr	r3, [r7, #4]
    }
 8004e24:	4618      	mov	r0, r3
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr
 8004e30:	200002a8 	.word	0x200002a8
 8004e34:	200002c4 	.word	0x200002c4

08004e38 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004e42:	4b36      	ldr	r3, [pc, #216]	; (8004f1c <prvAddCurrentTaskToDelayedList+0xe4>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e48:	4b35      	ldr	r3, [pc, #212]	; (8004f20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7fe fdc2 	bl	80039d8 <uxListRemove>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10b      	bne.n	8004e72 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004e5a:	4b31      	ldr	r3, [pc, #196]	; (8004f20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	2201      	movs	r2, #1
 8004e62:	fa02 f303 	lsl.w	r3, r2, r3
 8004e66:	43da      	mvns	r2, r3
 8004e68:	4b2e      	ldr	r3, [pc, #184]	; (8004f24 <prvAddCurrentTaskToDelayedList+0xec>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	4a2d      	ldr	r2, [pc, #180]	; (8004f24 <prvAddCurrentTaskToDelayedList+0xec>)
 8004e70:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e78:	d124      	bne.n	8004ec4 <prvAddCurrentTaskToDelayedList+0x8c>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d021      	beq.n	8004ec4 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e80:	4b29      	ldr	r3, [pc, #164]	; (8004f28 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	613b      	str	r3, [r7, #16]
 8004e86:	4b26      	ldr	r3, [pc, #152]	; (8004f20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	609a      	str	r2, [r3, #8]
 8004e8e:	4b24      	ldr	r3, [pc, #144]	; (8004f20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	6892      	ldr	r2, [r2, #8]
 8004e96:	60da      	str	r2, [r3, #12]
 8004e98:	4b21      	ldr	r3, [pc, #132]	; (8004f20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	3204      	adds	r2, #4
 8004ea2:	605a      	str	r2, [r3, #4]
 8004ea4:	4b1e      	ldr	r3, [pc, #120]	; (8004f20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	1d1a      	adds	r2, r3, #4
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	609a      	str	r2, [r3, #8]
 8004eae:	4b1c      	ldr	r3, [pc, #112]	; (8004f20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a1d      	ldr	r2, [pc, #116]	; (8004f28 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004eb4:	615a      	str	r2, [r3, #20]
 8004eb6:	4b1c      	ldr	r3, [pc, #112]	; (8004f28 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	4a1a      	ldr	r2, [pc, #104]	; (8004f28 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004ebe:	6013      	str	r3, [r2, #0]
 8004ec0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004ec2:	e026      	b.n	8004f12 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4413      	add	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ecc:	4b14      	ldr	r3, [pc, #80]	; (8004f20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d209      	bcs.n	8004ef0 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004edc:	4b13      	ldr	r3, [pc, #76]	; (8004f2c <prvAddCurrentTaskToDelayedList+0xf4>)
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	4b0f      	ldr	r3, [pc, #60]	; (8004f20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4610      	mov	r0, r2
 8004eea:	f7fe fd3c 	bl	8003966 <vListInsert>
}
 8004eee:	e010      	b.n	8004f12 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ef0:	4b0f      	ldr	r3, [pc, #60]	; (8004f30 <prvAddCurrentTaskToDelayedList+0xf8>)
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	3304      	adds	r3, #4
 8004efa:	4619      	mov	r1, r3
 8004efc:	4610      	mov	r0, r2
 8004efe:	f7fe fd32 	bl	8003966 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004f02:	4b0c      	ldr	r3, [pc, #48]	; (8004f34 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d202      	bcs.n	8004f12 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8004f0c:	4a09      	ldr	r2, [pc, #36]	; (8004f34 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6013      	str	r3, [r2, #0]
}
 8004f12:	bf00      	nop
 8004f14:	3718      	adds	r7, #24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	200002a0 	.word	0x200002a0
 8004f20:	200001c4 	.word	0x200001c4
 8004f24:	200002a4 	.word	0x200002a4
 8004f28:	20000288 	.word	0x20000288
 8004f2c:	20000258 	.word	0x20000258
 8004f30:	20000254 	.word	0x20000254
 8004f34:	200002bc 	.word	0x200002bc

08004f38 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004f42:	f000 fa47 	bl	80053d4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004f46:	4b11      	ldr	r3, [pc, #68]	; (8004f8c <xTimerCreateTimerTask+0x54>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00b      	beq.n	8004f66 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8004f4e:	4b10      	ldr	r3, [pc, #64]	; (8004f90 <xTimerCreateTimerTask+0x58>)
 8004f50:	9301      	str	r3, [sp, #4]
 8004f52:	2302      	movs	r3, #2
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	2300      	movs	r3, #0
 8004f58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004f5c:	490d      	ldr	r1, [pc, #52]	; (8004f94 <xTimerCreateTimerTask+0x5c>)
 8004f5e:	480e      	ldr	r0, [pc, #56]	; (8004f98 <xTimerCreateTimerTask+0x60>)
 8004f60:	f7ff f856 	bl	8004010 <xTaskCreate>
 8004f64:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10a      	bne.n	8004f82 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	603b      	str	r3, [r7, #0]
    }
 8004f7e:	bf00      	nop
 8004f80:	e7fe      	b.n	8004f80 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004f82:	687b      	ldr	r3, [r7, #4]
    }
 8004f84:	4618      	mov	r0, r3
 8004f86:	3708      	adds	r7, #8
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	200002f8 	.word	0x200002f8
 8004f90:	200002fc 	.word	0x200002fc
 8004f94:	08005cd0 	.word	0x08005cd0
 8004f98:	08005041 	.word	0x08005041

08004f9c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004fa8:	e008      	b.n	8004fbc <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a1b      	ldr	r3, [r3, #32]
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	699a      	ldr	r2, [r3, #24]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	18d1      	adds	r1, r2, r3
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 f8dd 	bl	8005188 <prvInsertTimerInActiveList>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1ea      	bne.n	8004faa <prvReloadTimer+0xe>
        }
    }
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fea:	4b14      	ldr	r3, [pc, #80]	; (800503c <prvProcessExpiredTimer+0x5c>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	3304      	adds	r3, #4
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7fe fced 	bl	80039d8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	2b00      	cmp	r3, #0
 800500a:	d005      	beq.n	8005018 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	6879      	ldr	r1, [r7, #4]
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f7ff ffc3 	bl	8004f9c <prvReloadTimer>
 8005016:	e008      	b.n	800502a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800501e:	f023 0301 	bic.w	r3, r3, #1
 8005022:	b2da      	uxtb	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	4798      	blx	r3
    }
 8005032:	bf00      	nop
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	200002f0 	.word	0x200002f0

08005040 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005048:	f107 0308 	add.w	r3, r7, #8
 800504c:	4618      	mov	r0, r3
 800504e:	f000 f857 	bl	8005100 <prvGetNextExpireTime>
 8005052:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	4619      	mov	r1, r3
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 f803 	bl	8005064 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800505e:	f000 f8d5 	bl	800520c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005062:	e7f1      	b.n	8005048 <prvTimerTask+0x8>

08005064 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800506e:	f7ff f9bf 	bl	80043f0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005072:	f107 0308 	add.w	r3, r7, #8
 8005076:	4618      	mov	r0, r3
 8005078:	f000 f866 	bl	8005148 <prvSampleTimeNow>
 800507c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d130      	bne.n	80050e6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10a      	bne.n	80050a0 <prvProcessTimerOrBlockTask+0x3c>
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	429a      	cmp	r2, r3
 8005090:	d806      	bhi.n	80050a0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005092:	f7ff f9bb 	bl	800440c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005096:	68f9      	ldr	r1, [r7, #12]
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7ff ffa1 	bl	8004fe0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800509e:	e024      	b.n	80050ea <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d008      	beq.n	80050b8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80050a6:	4b13      	ldr	r3, [pc, #76]	; (80050f4 <prvProcessTimerOrBlockTask+0x90>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <prvProcessTimerOrBlockTask+0x50>
 80050b0:	2301      	movs	r3, #1
 80050b2:	e000      	b.n	80050b6 <prvProcessTimerOrBlockTask+0x52>
 80050b4:	2300      	movs	r3, #0
 80050b6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80050b8:	4b0f      	ldr	r3, [pc, #60]	; (80050f8 <prvProcessTimerOrBlockTask+0x94>)
 80050ba:	6818      	ldr	r0, [r3, #0]
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	4619      	mov	r1, r3
 80050c6:	f7fe ff6f 	bl	8003fa8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80050ca:	f7ff f99f 	bl	800440c <xTaskResumeAll>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10a      	bne.n	80050ea <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80050d4:	4b09      	ldr	r3, [pc, #36]	; (80050fc <prvProcessTimerOrBlockTask+0x98>)
 80050d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	f3bf 8f6f 	isb	sy
    }
 80050e4:	e001      	b.n	80050ea <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80050e6:	f7ff f991 	bl	800440c <xTaskResumeAll>
    }
 80050ea:	bf00      	nop
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	200002f4 	.word	0x200002f4
 80050f8:	200002f8 	.word	0x200002f8
 80050fc:	e000ed04 	.word	0xe000ed04

08005100 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005108:	4b0e      	ldr	r3, [pc, #56]	; (8005144 <prvGetNextExpireTime+0x44>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <prvGetNextExpireTime+0x16>
 8005112:	2201      	movs	r2, #1
 8005114:	e000      	b.n	8005118 <prvGetNextExpireTime+0x18>
 8005116:	2200      	movs	r2, #0
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d105      	bne.n	8005130 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005124:	4b07      	ldr	r3, [pc, #28]	; (8005144 <prvGetNextExpireTime+0x44>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	60fb      	str	r3, [r7, #12]
 800512e:	e001      	b.n	8005134 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005134:	68fb      	ldr	r3, [r7, #12]
    }
 8005136:	4618      	mov	r0, r3
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	200002f0 	.word	0x200002f0

08005148 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005150:	f7ff fa58 	bl	8004604 <xTaskGetTickCount>
 8005154:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005156:	4b0b      	ldr	r3, [pc, #44]	; (8005184 <prvSampleTimeNow+0x3c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	429a      	cmp	r2, r3
 800515e:	d205      	bcs.n	800516c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005160:	f000 f912 	bl	8005388 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	e002      	b.n	8005172 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005172:	4a04      	ldr	r2, [pc, #16]	; (8005184 <prvSampleTimeNow+0x3c>)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005178:	68fb      	ldr	r3, [r7, #12]
    }
 800517a:	4618      	mov	r0, r3
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	20000300 	.word	0x20000300

08005188 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005196:	2300      	movs	r3, #0
 8005198:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d812      	bhi.n	80051d4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	1ad2      	subs	r2, r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d302      	bcc.n	80051c2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80051bc:	2301      	movs	r3, #1
 80051be:	617b      	str	r3, [r7, #20]
 80051c0:	e01b      	b.n	80051fa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80051c2:	4b10      	ldr	r3, [pc, #64]	; (8005204 <prvInsertTimerInActiveList+0x7c>)
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	3304      	adds	r3, #4
 80051ca:	4619      	mov	r1, r3
 80051cc:	4610      	mov	r0, r2
 80051ce:	f7fe fbca 	bl	8003966 <vListInsert>
 80051d2:	e012      	b.n	80051fa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d206      	bcs.n	80051ea <prvInsertTimerInActiveList+0x62>
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d302      	bcc.n	80051ea <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80051e4:	2301      	movs	r3, #1
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	e007      	b.n	80051fa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051ea:	4b07      	ldr	r3, [pc, #28]	; (8005208 <prvInsertTimerInActiveList+0x80>)
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	3304      	adds	r3, #4
 80051f2:	4619      	mov	r1, r3
 80051f4:	4610      	mov	r0, r2
 80051f6:	f7fe fbb6 	bl	8003966 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80051fa:	697b      	ldr	r3, [r7, #20]
    }
 80051fc:	4618      	mov	r0, r3
 80051fe:	3718      	adds	r7, #24
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	200002f4 	.word	0x200002f4
 8005208:	200002f0 	.word	0x200002f0

0800520c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005212:	e0a6      	b.n	8005362 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	f2c0 80a2 	blt.w	8005360 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d004      	beq.n	8005232 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	3304      	adds	r3, #4
 800522c:	4618      	mov	r0, r3
 800522e:	f7fe fbd3 	bl	80039d8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005232:	1d3b      	adds	r3, r7, #4
 8005234:	4618      	mov	r0, r3
 8005236:	f7ff ff87 	bl	8005148 <prvSampleTimeNow>
 800523a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	3b01      	subs	r3, #1
 8005240:	2b08      	cmp	r3, #8
 8005242:	f200 808e 	bhi.w	8005362 <prvProcessReceivedCommands+0x156>
 8005246:	a201      	add	r2, pc, #4	; (adr r2, 800524c <prvProcessReceivedCommands+0x40>)
 8005248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524c:	08005271 	.word	0x08005271
 8005250:	08005271 	.word	0x08005271
 8005254:	080052d9 	.word	0x080052d9
 8005258:	080052ed 	.word	0x080052ed
 800525c:	08005337 	.word	0x08005337
 8005260:	08005271 	.word	0x08005271
 8005264:	08005271 	.word	0x08005271
 8005268:	080052d9 	.word	0x080052d9
 800526c:	080052ed 	.word	0x080052ed
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005276:	f043 0301 	orr.w	r3, r3, #1
 800527a:	b2da      	uxtb	r2, r3
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	18d1      	adds	r1, r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	69f8      	ldr	r0, [r7, #28]
 8005290:	f7ff ff7a 	bl	8005188 <prvInsertTimerInActiveList>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d063      	beq.n	8005362 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052a0:	f003 0304 	and.w	r3, r3, #4
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d009      	beq.n	80052bc <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	4413      	add	r3, r2
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	4619      	mov	r1, r3
 80052b4:	69f8      	ldr	r0, [r7, #28]
 80052b6:	f7ff fe71 	bl	8004f9c <prvReloadTimer>
 80052ba:	e008      	b.n	80052ce <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052c2:	f023 0301 	bic.w	r3, r3, #1
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	69f8      	ldr	r0, [r7, #28]
 80052d4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80052d6:	e044      	b.n	8005362 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052de:	f023 0301 	bic.w	r3, r3, #1
 80052e2:	b2da      	uxtb	r2, r3
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80052ea:	e03a      	b.n	8005362 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052f2:	f043 0301 	orr.w	r3, r3, #1
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10a      	bne.n	8005322 <prvProcessReceivedCommands+0x116>
        __asm volatile
 800530c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005310:	f383 8811 	msr	BASEPRI, r3
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	617b      	str	r3, [r7, #20]
    }
 800531e:	bf00      	nop
 8005320:	e7fe      	b.n	8005320 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	699a      	ldr	r2, [r3, #24]
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	18d1      	adds	r1, r2, r3
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	69f8      	ldr	r0, [r7, #28]
 8005330:	f7ff ff2a 	bl	8005188 <prvInsertTimerInActiveList>
                        break;
 8005334:	e015      	b.n	8005362 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d103      	bne.n	800534c <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8005344:	69f8      	ldr	r0, [r7, #28]
 8005346:	f000 fb43 	bl	80059d0 <vPortFree>
 800534a:	e00a      	b.n	8005362 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005352:	f023 0301 	bic.w	r3, r3, #1
 8005356:	b2da      	uxtb	r2, r3
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800535e:	e000      	b.n	8005362 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8005360:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005362:	4b08      	ldr	r3, [pc, #32]	; (8005384 <prvProcessReceivedCommands+0x178>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f107 0108 	add.w	r1, r7, #8
 800536a:	2200      	movs	r2, #0
 800536c:	4618      	mov	r0, r3
 800536e:	f7fe fc5f 	bl	8003c30 <xQueueReceive>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	f47f af4d 	bne.w	8005214 <prvProcessReceivedCommands+0x8>
        }
    }
 800537a:	bf00      	nop
 800537c:	bf00      	nop
 800537e:	3720      	adds	r7, #32
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	200002f8 	.word	0x200002f8

08005388 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800538e:	e009      	b.n	80053a4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005390:	4b0e      	ldr	r3, [pc, #56]	; (80053cc <prvSwitchTimerLists+0x44>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800539a:	f04f 31ff 	mov.w	r1, #4294967295
 800539e:	6838      	ldr	r0, [r7, #0]
 80053a0:	f7ff fe1e 	bl	8004fe0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80053a4:	4b09      	ldr	r3, [pc, #36]	; (80053cc <prvSwitchTimerLists+0x44>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1f0      	bne.n	8005390 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80053ae:	4b07      	ldr	r3, [pc, #28]	; (80053cc <prvSwitchTimerLists+0x44>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80053b4:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <prvSwitchTimerLists+0x48>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a04      	ldr	r2, [pc, #16]	; (80053cc <prvSwitchTimerLists+0x44>)
 80053ba:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80053bc:	4a04      	ldr	r2, [pc, #16]	; (80053d0 <prvSwitchTimerLists+0x48>)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6013      	str	r3, [r2, #0]
    }
 80053c2:	bf00      	nop
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	200002f0 	.word	0x200002f0
 80053d0:	200002f4 	.word	0x200002f4

080053d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80053d8:	f000 f95e 	bl	8005698 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80053dc:	4b12      	ldr	r3, [pc, #72]	; (8005428 <prvCheckForValidListAndQueue+0x54>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d11d      	bne.n	8005420 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80053e4:	4811      	ldr	r0, [pc, #68]	; (800542c <prvCheckForValidListAndQueue+0x58>)
 80053e6:	f7fe fa91 	bl	800390c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80053ea:	4811      	ldr	r0, [pc, #68]	; (8005430 <prvCheckForValidListAndQueue+0x5c>)
 80053ec:	f7fe fa8e 	bl	800390c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80053f0:	4b10      	ldr	r3, [pc, #64]	; (8005434 <prvCheckForValidListAndQueue+0x60>)
 80053f2:	4a0e      	ldr	r2, [pc, #56]	; (800542c <prvCheckForValidListAndQueue+0x58>)
 80053f4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80053f6:	4b10      	ldr	r3, [pc, #64]	; (8005438 <prvCheckForValidListAndQueue+0x64>)
 80053f8:	4a0d      	ldr	r2, [pc, #52]	; (8005430 <prvCheckForValidListAndQueue+0x5c>)
 80053fa:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80053fc:	2200      	movs	r2, #0
 80053fe:	210c      	movs	r1, #12
 8005400:	200a      	movs	r0, #10
 8005402:	f7fe fba3 	bl	8003b4c <xQueueGenericCreate>
 8005406:	4603      	mov	r3, r0
 8005408:	4a07      	ldr	r2, [pc, #28]	; (8005428 <prvCheckForValidListAndQueue+0x54>)
 800540a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800540c:	4b06      	ldr	r3, [pc, #24]	; (8005428 <prvCheckForValidListAndQueue+0x54>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d005      	beq.n	8005420 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005414:	4b04      	ldr	r3, [pc, #16]	; (8005428 <prvCheckForValidListAndQueue+0x54>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4908      	ldr	r1, [pc, #32]	; (800543c <prvCheckForValidListAndQueue+0x68>)
 800541a:	4618      	mov	r0, r3
 800541c:	f7fe fd76 	bl	8003f0c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005420:	f000 f96a 	bl	80056f8 <vPortExitCritical>
    }
 8005424:	bf00      	nop
 8005426:	bd80      	pop	{r7, pc}
 8005428:	200002f8 	.word	0x200002f8
 800542c:	200002c8 	.word	0x200002c8
 8005430:	200002dc 	.word	0x200002dc
 8005434:	200002f0 	.word	0x200002f0
 8005438:	200002f4 	.word	0x200002f4
 800543c:	08005cd8 	.word	0x08005cd8

08005440 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	3b04      	subs	r3, #4
 8005450:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005458:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	3b04      	subs	r3, #4
 800545e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	f023 0201 	bic.w	r2, r3, #1
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	3b04      	subs	r3, #4
 800546e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005470:	4a0c      	ldr	r2, [pc, #48]	; (80054a4 <pxPortInitialiseStack+0x64>)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	3b14      	subs	r3, #20
 800547a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	3b04      	subs	r3, #4
 8005486:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f06f 0202 	mvn.w	r2, #2
 800548e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	3b20      	subs	r3, #32
 8005494:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005496:	68fb      	ldr	r3, [r7, #12]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr
 80054a4:	080054a9 	.word	0x080054a9

080054a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80054ae:	2300      	movs	r3, #0
 80054b0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80054b2:	4b12      	ldr	r3, [pc, #72]	; (80054fc <prvTaskExitError+0x54>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ba:	d00a      	beq.n	80054d2 <prvTaskExitError+0x2a>
        __asm volatile
 80054bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c0:	f383 8811 	msr	BASEPRI, r3
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	60fb      	str	r3, [r7, #12]
    }
 80054ce:	bf00      	nop
 80054d0:	e7fe      	b.n	80054d0 <prvTaskExitError+0x28>
        __asm volatile
 80054d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	60bb      	str	r3, [r7, #8]
    }
 80054e4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80054e6:	bf00      	nop
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d0fc      	beq.n	80054e8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80054ee:	bf00      	nop
 80054f0:	bf00      	nop
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr
 80054fc:	20000014 	.word	0x20000014

08005500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005500:	4b07      	ldr	r3, [pc, #28]	; (8005520 <pxCurrentTCBConst2>)
 8005502:	6819      	ldr	r1, [r3, #0]
 8005504:	6808      	ldr	r0, [r1, #0]
 8005506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800550a:	f380 8809 	msr	PSP, r0
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f04f 0000 	mov.w	r0, #0
 8005516:	f380 8811 	msr	BASEPRI, r0
 800551a:	4770      	bx	lr
 800551c:	f3af 8000 	nop.w

08005520 <pxCurrentTCBConst2>:
 8005520:	200001c4 	.word	0x200001c4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005524:	bf00      	nop
 8005526:	bf00      	nop

08005528 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005528:	4808      	ldr	r0, [pc, #32]	; (800554c <prvPortStartFirstTask+0x24>)
 800552a:	6800      	ldr	r0, [r0, #0]
 800552c:	6800      	ldr	r0, [r0, #0]
 800552e:	f380 8808 	msr	MSP, r0
 8005532:	f04f 0000 	mov.w	r0, #0
 8005536:	f380 8814 	msr	CONTROL, r0
 800553a:	b662      	cpsie	i
 800553c:	b661      	cpsie	f
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	df00      	svc	0
 8005548:	bf00      	nop
 800554a:	0000      	.short	0x0000
 800554c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005550:	bf00      	nop
 8005552:	bf00      	nop

08005554 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800555a:	4b46      	ldr	r3, [pc, #280]	; (8005674 <xPortStartScheduler+0x120>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a46      	ldr	r2, [pc, #280]	; (8005678 <xPortStartScheduler+0x124>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d10a      	bne.n	800557a <xPortStartScheduler+0x26>
        __asm volatile
 8005564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	613b      	str	r3, [r7, #16]
    }
 8005576:	bf00      	nop
 8005578:	e7fe      	b.n	8005578 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800557a:	4b3e      	ldr	r3, [pc, #248]	; (8005674 <xPortStartScheduler+0x120>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a3f      	ldr	r2, [pc, #252]	; (800567c <xPortStartScheduler+0x128>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d10a      	bne.n	800559a <xPortStartScheduler+0x46>
        __asm volatile
 8005584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	60fb      	str	r3, [r7, #12]
    }
 8005596:	bf00      	nop
 8005598:	e7fe      	b.n	8005598 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800559a:	4b39      	ldr	r3, [pc, #228]	; (8005680 <xPortStartScheduler+0x12c>)
 800559c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	22ff      	movs	r2, #255	; 0xff
 80055aa:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80055b4:	78fb      	ldrb	r3, [r7, #3]
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	4b31      	ldr	r3, [pc, #196]	; (8005684 <xPortStartScheduler+0x130>)
 80055c0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80055c2:	4b31      	ldr	r3, [pc, #196]	; (8005688 <xPortStartScheduler+0x134>)
 80055c4:	2207      	movs	r2, #7
 80055c6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055c8:	e009      	b.n	80055de <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80055ca:	4b2f      	ldr	r3, [pc, #188]	; (8005688 <xPortStartScheduler+0x134>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	3b01      	subs	r3, #1
 80055d0:	4a2d      	ldr	r2, [pc, #180]	; (8005688 <xPortStartScheduler+0x134>)
 80055d2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80055d4:	78fb      	ldrb	r3, [r7, #3]
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	005b      	lsls	r3, r3, #1
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055de:	78fb      	ldrb	r3, [r7, #3]
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e6:	2b80      	cmp	r3, #128	; 0x80
 80055e8:	d0ef      	beq.n	80055ca <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80055ea:	4b27      	ldr	r3, [pc, #156]	; (8005688 <xPortStartScheduler+0x134>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f1c3 0307 	rsb	r3, r3, #7
 80055f2:	2b04      	cmp	r3, #4
 80055f4:	d00a      	beq.n	800560c <xPortStartScheduler+0xb8>
        __asm volatile
 80055f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	60bb      	str	r3, [r7, #8]
    }
 8005608:	bf00      	nop
 800560a:	e7fe      	b.n	800560a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800560c:	4b1e      	ldr	r3, [pc, #120]	; (8005688 <xPortStartScheduler+0x134>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	021b      	lsls	r3, r3, #8
 8005612:	4a1d      	ldr	r2, [pc, #116]	; (8005688 <xPortStartScheduler+0x134>)
 8005614:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005616:	4b1c      	ldr	r3, [pc, #112]	; (8005688 <xPortStartScheduler+0x134>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800561e:	4a1a      	ldr	r2, [pc, #104]	; (8005688 <xPortStartScheduler+0x134>)
 8005620:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	b2da      	uxtb	r2, r3
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800562a:	4b18      	ldr	r3, [pc, #96]	; (800568c <xPortStartScheduler+0x138>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a17      	ldr	r2, [pc, #92]	; (800568c <xPortStartScheduler+0x138>)
 8005630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005634:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005636:	4b15      	ldr	r3, [pc, #84]	; (800568c <xPortStartScheduler+0x138>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a14      	ldr	r2, [pc, #80]	; (800568c <xPortStartScheduler+0x138>)
 800563c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005640:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005642:	f000 f8db 	bl	80057fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005646:	4b12      	ldr	r3, [pc, #72]	; (8005690 <xPortStartScheduler+0x13c>)
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800564c:	f000 f8fa 	bl	8005844 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005650:	4b10      	ldr	r3, [pc, #64]	; (8005694 <xPortStartScheduler+0x140>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a0f      	ldr	r2, [pc, #60]	; (8005694 <xPortStartScheduler+0x140>)
 8005656:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800565a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800565c:	f7ff ff64 	bl	8005528 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005660:	f7ff f8f6 	bl	8004850 <vTaskSwitchContext>
    prvTaskExitError();
 8005664:	f7ff ff20 	bl	80054a8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3718      	adds	r7, #24
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	e000ed00 	.word	0xe000ed00
 8005678:	410fc271 	.word	0x410fc271
 800567c:	410fc270 	.word	0x410fc270
 8005680:	e000e400 	.word	0xe000e400
 8005684:	20000304 	.word	0x20000304
 8005688:	20000308 	.word	0x20000308
 800568c:	e000ed20 	.word	0xe000ed20
 8005690:	20000014 	.word	0x20000014
 8005694:	e000ef34 	.word	0xe000ef34

08005698 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
        __asm volatile
 800569e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a2:	f383 8811 	msr	BASEPRI, r3
 80056a6:	f3bf 8f6f 	isb	sy
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	607b      	str	r3, [r7, #4]
    }
 80056b0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80056b2:	4b0f      	ldr	r3, [pc, #60]	; (80056f0 <vPortEnterCritical+0x58>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	3301      	adds	r3, #1
 80056b8:	4a0d      	ldr	r2, [pc, #52]	; (80056f0 <vPortEnterCritical+0x58>)
 80056ba:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80056bc:	4b0c      	ldr	r3, [pc, #48]	; (80056f0 <vPortEnterCritical+0x58>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d10f      	bne.n	80056e4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80056c4:	4b0b      	ldr	r3, [pc, #44]	; (80056f4 <vPortEnterCritical+0x5c>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00a      	beq.n	80056e4 <vPortEnterCritical+0x4c>
        __asm volatile
 80056ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	603b      	str	r3, [r7, #0]
    }
 80056e0:	bf00      	nop
 80056e2:	e7fe      	b.n	80056e2 <vPortEnterCritical+0x4a>
    }
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	20000014 	.word	0x20000014
 80056f4:	e000ed04 	.word	0xe000ed04

080056f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80056fe:	4b12      	ldr	r3, [pc, #72]	; (8005748 <vPortExitCritical+0x50>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10a      	bne.n	800571c <vPortExitCritical+0x24>
        __asm volatile
 8005706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	607b      	str	r3, [r7, #4]
    }
 8005718:	bf00      	nop
 800571a:	e7fe      	b.n	800571a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800571c:	4b0a      	ldr	r3, [pc, #40]	; (8005748 <vPortExitCritical+0x50>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3b01      	subs	r3, #1
 8005722:	4a09      	ldr	r2, [pc, #36]	; (8005748 <vPortExitCritical+0x50>)
 8005724:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005726:	4b08      	ldr	r3, [pc, #32]	; (8005748 <vPortExitCritical+0x50>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d105      	bne.n	800573a <vPortExitCritical+0x42>
 800572e:	2300      	movs	r3, #0
 8005730:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005738:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800573a:	bf00      	nop
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	20000014 	.word	0x20000014
 800574c:	00000000 	.word	0x00000000

08005750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005750:	f3ef 8009 	mrs	r0, PSP
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	4b15      	ldr	r3, [pc, #84]	; (80057b0 <pxCurrentTCBConst>)
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	f01e 0f10 	tst.w	lr, #16
 8005760:	bf08      	it	eq
 8005762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800576a:	6010      	str	r0, [r2, #0]
 800576c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005770:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005774:	f380 8811 	msr	BASEPRI, r0
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	f3bf 8f6f 	isb	sy
 8005780:	f7ff f866 	bl	8004850 <vTaskSwitchContext>
 8005784:	f04f 0000 	mov.w	r0, #0
 8005788:	f380 8811 	msr	BASEPRI, r0
 800578c:	bc09      	pop	{r0, r3}
 800578e:	6819      	ldr	r1, [r3, #0]
 8005790:	6808      	ldr	r0, [r1, #0]
 8005792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005796:	f01e 0f10 	tst.w	lr, #16
 800579a:	bf08      	it	eq
 800579c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80057a0:	f380 8809 	msr	PSP, r0
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	f3af 8000 	nop.w

080057b0 <pxCurrentTCBConst>:
 80057b0:	200001c4 	.word	0x200001c4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80057b4:	bf00      	nop
 80057b6:	bf00      	nop

080057b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
        __asm volatile
 80057be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c2:	f383 8811 	msr	BASEPRI, r3
 80057c6:	f3bf 8f6f 	isb	sy
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	607b      	str	r3, [r7, #4]
    }
 80057d0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80057d2:	f7fe ff27 	bl	8004624 <xTaskIncrementTick>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d003      	beq.n	80057e4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80057dc:	4b06      	ldr	r3, [pc, #24]	; (80057f8 <SysTick_Handler+0x40>)
 80057de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	2300      	movs	r3, #0
 80057e6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	f383 8811 	msr	BASEPRI, r3
    }
 80057ee:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80057f0:	bf00      	nop
 80057f2:	3708      	adds	r7, #8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	e000ed04 	.word	0xe000ed04

080057fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005800:	4b0b      	ldr	r3, [pc, #44]	; (8005830 <vPortSetupTimerInterrupt+0x34>)
 8005802:	2200      	movs	r2, #0
 8005804:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005806:	4b0b      	ldr	r3, [pc, #44]	; (8005834 <vPortSetupTimerInterrupt+0x38>)
 8005808:	2200      	movs	r2, #0
 800580a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800580c:	4b0a      	ldr	r3, [pc, #40]	; (8005838 <vPortSetupTimerInterrupt+0x3c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a0a      	ldr	r2, [pc, #40]	; (800583c <vPortSetupTimerInterrupt+0x40>)
 8005812:	fba2 2303 	umull	r2, r3, r2, r3
 8005816:	099b      	lsrs	r3, r3, #6
 8005818:	4a09      	ldr	r2, [pc, #36]	; (8005840 <vPortSetupTimerInterrupt+0x44>)
 800581a:	3b01      	subs	r3, #1
 800581c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800581e:	4b04      	ldr	r3, [pc, #16]	; (8005830 <vPortSetupTimerInterrupt+0x34>)
 8005820:	2207      	movs	r2, #7
 8005822:	601a      	str	r2, [r3, #0]
}
 8005824:	bf00      	nop
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	e000e010 	.word	0xe000e010
 8005834:	e000e018 	.word	0xe000e018
 8005838:	20000004 	.word	0x20000004
 800583c:	10624dd3 	.word	0x10624dd3
 8005840:	e000e014 	.word	0xe000e014

08005844 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005844:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005854 <vPortEnableVFP+0x10>
 8005848:	6801      	ldr	r1, [r0, #0]
 800584a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800584e:	6001      	str	r1, [r0, #0]
 8005850:	4770      	bx	lr
 8005852:	0000      	.short	0x0000
 8005854:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005858:	bf00      	nop
 800585a:	bf00      	nop

0800585c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b08a      	sub	sp, #40	; 0x28
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005864:	2300      	movs	r3, #0
 8005866:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8005868:	f7fe fdc2 	bl	80043f0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800586c:	4b53      	ldr	r3, [pc, #332]	; (80059bc <pvPortMalloc+0x160>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005874:	f000 f908 	bl	8005a88 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d012      	beq.n	80058a4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800587e:	2208      	movs	r2, #8
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f003 0307 	and.w	r3, r3, #7
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	3308      	adds	r3, #8
 800588a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	43db      	mvns	r3, r3
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	429a      	cmp	r2, r3
 8005894:	d804      	bhi.n	80058a0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	4413      	add	r3, r2
 800589c:	607b      	str	r3, [r7, #4]
 800589e:	e001      	b.n	80058a4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80058a0:	2300      	movs	r3, #0
 80058a2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	db70      	blt.n	800598c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d06d      	beq.n	800598c <pvPortMalloc+0x130>
 80058b0:	4b43      	ldr	r3, [pc, #268]	; (80059c0 <pvPortMalloc+0x164>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d868      	bhi.n	800598c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80058ba:	4b42      	ldr	r3, [pc, #264]	; (80059c4 <pvPortMalloc+0x168>)
 80058bc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80058be:	4b41      	ldr	r3, [pc, #260]	; (80059c4 <pvPortMalloc+0x168>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058c4:	e004      	b.n	80058d0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d903      	bls.n	80058e2 <pvPortMalloc+0x86>
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1f1      	bne.n	80058c6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80058e2:	4b36      	ldr	r3, [pc, #216]	; (80059bc <pvPortMalloc+0x160>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d04f      	beq.n	800598c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2208      	movs	r2, #8
 80058f2:	4413      	add	r3, r2
 80058f4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	6a3b      	ldr	r3, [r7, #32]
 80058fc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	1ad2      	subs	r2, r2, r3
 8005906:	2308      	movs	r3, #8
 8005908:	005b      	lsls	r3, r3, #1
 800590a:	429a      	cmp	r2, r3
 800590c:	d91f      	bls.n	800594e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800590e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4413      	add	r3, r2
 8005914:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f003 0307 	and.w	r3, r3, #7
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00a      	beq.n	8005936 <pvPortMalloc+0xda>
        __asm volatile
 8005920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005924:	f383 8811 	msr	BASEPRI, r3
 8005928:	f3bf 8f6f 	isb	sy
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	613b      	str	r3, [r7, #16]
    }
 8005932:	bf00      	nop
 8005934:	e7fe      	b.n	8005934 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	1ad2      	subs	r2, r2, r3
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005948:	6978      	ldr	r0, [r7, #20]
 800594a:	f000 f8f9 	bl	8005b40 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800594e:	4b1c      	ldr	r3, [pc, #112]	; (80059c0 <pvPortMalloc+0x164>)
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	4a19      	ldr	r2, [pc, #100]	; (80059c0 <pvPortMalloc+0x164>)
 800595a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800595c:	4b18      	ldr	r3, [pc, #96]	; (80059c0 <pvPortMalloc+0x164>)
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	4b19      	ldr	r3, [pc, #100]	; (80059c8 <pvPortMalloc+0x16c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	429a      	cmp	r2, r3
 8005966:	d203      	bcs.n	8005970 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005968:	4b15      	ldr	r3, [pc, #84]	; (80059c0 <pvPortMalloc+0x164>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a16      	ldr	r2, [pc, #88]	; (80059c8 <pvPortMalloc+0x16c>)
 800596e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	2200      	movs	r2, #0
 8005980:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005982:	4b12      	ldr	r3, [pc, #72]	; (80059cc <pvPortMalloc+0x170>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	3301      	adds	r3, #1
 8005988:	4a10      	ldr	r2, [pc, #64]	; (80059cc <pvPortMalloc+0x170>)
 800598a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800598c:	f7fe fd3e 	bl	800440c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	f003 0307 	and.w	r3, r3, #7
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00a      	beq.n	80059b0 <pvPortMalloc+0x154>
        __asm volatile
 800599a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599e:	f383 8811 	msr	BASEPRI, r3
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	f3bf 8f4f 	dsb	sy
 80059aa:	60fb      	str	r3, [r7, #12]
    }
 80059ac:	bf00      	nop
 80059ae:	e7fe      	b.n	80059ae <pvPortMalloc+0x152>
    return pvReturn;
 80059b0:	69fb      	ldr	r3, [r7, #28]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3728      	adds	r7, #40	; 0x28
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	20012f14 	.word	0x20012f14
 80059c0:	20012f18 	.word	0x20012f18
 80059c4:	20012f0c 	.word	0x20012f0c
 80059c8:	20012f1c 	.word	0x20012f1c
 80059cc:	20012f20 	.word	0x20012f20

080059d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d049      	beq.n	8005a76 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80059e2:	2308      	movs	r3, #8
 80059e4:	425b      	negs	r3, r3
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	4413      	add	r3, r2
 80059ea:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	db0a      	blt.n	8005a0e <vPortFree+0x3e>
        __asm volatile
 80059f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fc:	f383 8811 	msr	BASEPRI, r3
 8005a00:	f3bf 8f6f 	isb	sy
 8005a04:	f3bf 8f4f 	dsb	sy
 8005a08:	60fb      	str	r3, [r7, #12]
    }
 8005a0a:	bf00      	nop
 8005a0c:	e7fe      	b.n	8005a0c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <vPortFree+0x5c>
        __asm volatile
 8005a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	60bb      	str	r3, [r7, #8]
    }
 8005a28:	bf00      	nop
 8005a2a:	e7fe      	b.n	8005a2a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	0fdb      	lsrs	r3, r3, #31
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d01c      	beq.n	8005a76 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d118      	bne.n	8005a76 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8005a50:	f7fe fcce 	bl	80043f0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	4b09      	ldr	r3, [pc, #36]	; (8005a80 <vPortFree+0xb0>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	4a08      	ldr	r2, [pc, #32]	; (8005a80 <vPortFree+0xb0>)
 8005a60:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a62:	6938      	ldr	r0, [r7, #16]
 8005a64:	f000 f86c 	bl	8005b40 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005a68:	4b06      	ldr	r3, [pc, #24]	; (8005a84 <vPortFree+0xb4>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	4a05      	ldr	r2, [pc, #20]	; (8005a84 <vPortFree+0xb4>)
 8005a70:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005a72:	f7fe fccb 	bl	800440c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005a76:	bf00      	nop
 8005a78:	3718      	adds	r7, #24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	20012f18 	.word	0x20012f18
 8005a84:	20012f24 	.word	0x20012f24

08005a88 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a8e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8005a92:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005a94:	4b25      	ldr	r3, [pc, #148]	; (8005b2c <prvHeapInit+0xa4>)
 8005a96:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f003 0307 	and.w	r3, r3, #7
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00c      	beq.n	8005abc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	3307      	adds	r3, #7
 8005aa6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f023 0307 	bic.w	r3, r3, #7
 8005aae:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	4a1d      	ldr	r2, [pc, #116]	; (8005b2c <prvHeapInit+0xa4>)
 8005ab8:	4413      	add	r3, r2
 8005aba:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ac0:	4a1b      	ldr	r2, [pc, #108]	; (8005b30 <prvHeapInit+0xa8>)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005ac6:	4b1a      	ldr	r3, [pc, #104]	; (8005b30 <prvHeapInit+0xa8>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005ad4:	2208      	movs	r2, #8
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	1a9b      	subs	r3, r3, r2
 8005ada:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f023 0307 	bic.w	r3, r3, #7
 8005ae2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4a13      	ldr	r2, [pc, #76]	; (8005b34 <prvHeapInit+0xac>)
 8005ae8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005aea:	4b12      	ldr	r3, [pc, #72]	; (8005b34 <prvHeapInit+0xac>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2200      	movs	r2, #0
 8005af0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005af2:	4b10      	ldr	r3, [pc, #64]	; (8005b34 <prvHeapInit+0xac>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2200      	movs	r2, #0
 8005af8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	1ad2      	subs	r2, r2, r3
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b08:	4b0a      	ldr	r3, [pc, #40]	; (8005b34 <prvHeapInit+0xac>)
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	4a08      	ldr	r2, [pc, #32]	; (8005b38 <prvHeapInit+0xb0>)
 8005b16:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	4a07      	ldr	r2, [pc, #28]	; (8005b3c <prvHeapInit+0xb4>)
 8005b1e:	6013      	str	r3, [r2, #0]
}
 8005b20:	bf00      	nop
 8005b22:	3714      	adds	r7, #20
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	2000030c 	.word	0x2000030c
 8005b30:	20012f0c 	.word	0x20012f0c
 8005b34:	20012f14 	.word	0x20012f14
 8005b38:	20012f1c 	.word	0x20012f1c
 8005b3c:	20012f18 	.word	0x20012f18

08005b40 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b48:	4b28      	ldr	r3, [pc, #160]	; (8005bec <prvInsertBlockIntoFreeList+0xac>)
 8005b4a:	60fb      	str	r3, [r7, #12]
 8005b4c:	e002      	b.n	8005b54 <prvInsertBlockIntoFreeList+0x14>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	60fb      	str	r3, [r7, #12]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d8f7      	bhi.n	8005b4e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	4413      	add	r3, r2
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d108      	bne.n	8005b82 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	441a      	add	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	441a      	add	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d118      	bne.n	8005bc8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	4b15      	ldr	r3, [pc, #84]	; (8005bf0 <prvInsertBlockIntoFreeList+0xb0>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d00d      	beq.n	8005bbe <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	441a      	add	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	601a      	str	r2, [r3, #0]
 8005bbc:	e008      	b.n	8005bd0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005bbe:	4b0c      	ldr	r3, [pc, #48]	; (8005bf0 <prvInsertBlockIntoFreeList+0xb0>)
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	e003      	b.n	8005bd0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d002      	beq.n	8005bde <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005bde:	bf00      	nop
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	20012f0c 	.word	0x20012f0c
 8005bf0:	20012f14 	.word	0x20012f14

08005bf4 <__libc_init_array>:
 8005bf4:	b570      	push	{r4, r5, r6, lr}
 8005bf6:	4d0d      	ldr	r5, [pc, #52]	; (8005c2c <__libc_init_array+0x38>)
 8005bf8:	4c0d      	ldr	r4, [pc, #52]	; (8005c30 <__libc_init_array+0x3c>)
 8005bfa:	1b64      	subs	r4, r4, r5
 8005bfc:	10a4      	asrs	r4, r4, #2
 8005bfe:	2600      	movs	r6, #0
 8005c00:	42a6      	cmp	r6, r4
 8005c02:	d109      	bne.n	8005c18 <__libc_init_array+0x24>
 8005c04:	4d0b      	ldr	r5, [pc, #44]	; (8005c34 <__libc_init_array+0x40>)
 8005c06:	4c0c      	ldr	r4, [pc, #48]	; (8005c38 <__libc_init_array+0x44>)
 8005c08:	f000 f82e 	bl	8005c68 <_init>
 8005c0c:	1b64      	subs	r4, r4, r5
 8005c0e:	10a4      	asrs	r4, r4, #2
 8005c10:	2600      	movs	r6, #0
 8005c12:	42a6      	cmp	r6, r4
 8005c14:	d105      	bne.n	8005c22 <__libc_init_array+0x2e>
 8005c16:	bd70      	pop	{r4, r5, r6, pc}
 8005c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c1c:	4798      	blx	r3
 8005c1e:	3601      	adds	r6, #1
 8005c20:	e7ee      	b.n	8005c00 <__libc_init_array+0xc>
 8005c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c26:	4798      	blx	r3
 8005c28:	3601      	adds	r6, #1
 8005c2a:	e7f2      	b.n	8005c12 <__libc_init_array+0x1e>
 8005c2c:	08005d08 	.word	0x08005d08
 8005c30:	08005d08 	.word	0x08005d08
 8005c34:	08005d08 	.word	0x08005d08
 8005c38:	08005d0c 	.word	0x08005d0c

08005c3c <memcpy>:
 8005c3c:	440a      	add	r2, r1
 8005c3e:	4291      	cmp	r1, r2
 8005c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c44:	d100      	bne.n	8005c48 <memcpy+0xc>
 8005c46:	4770      	bx	lr
 8005c48:	b510      	push	{r4, lr}
 8005c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c52:	4291      	cmp	r1, r2
 8005c54:	d1f9      	bne.n	8005c4a <memcpy+0xe>
 8005c56:	bd10      	pop	{r4, pc}

08005c58 <memset>:
 8005c58:	4402      	add	r2, r0
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d100      	bne.n	8005c62 <memset+0xa>
 8005c60:	4770      	bx	lr
 8005c62:	f803 1b01 	strb.w	r1, [r3], #1
 8005c66:	e7f9      	b.n	8005c5c <memset+0x4>

08005c68 <_init>:
 8005c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6a:	bf00      	nop
 8005c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c6e:	bc08      	pop	{r3}
 8005c70:	469e      	mov	lr, r3
 8005c72:	4770      	bx	lr

08005c74 <_fini>:
 8005c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c76:	bf00      	nop
 8005c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c7a:	bc08      	pop	{r3}
 8005c7c:	469e      	mov	lr, r3
 8005c7e:	4770      	bx	lr
